/*
 * generated by Xtext 2.12.0
 */
package xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.services.TowerDefenseGrammarAccess;
import xtext.towerDefense.Jeu;
import xtext.towerDefense.Niveau;
import xtext.towerDefense.Partie;
import xtext.towerDefense.PartieElement;
import xtext.towerDefense.TowerDefensePackage;

@SuppressWarnings("all")
public class TowerDefenseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TowerDefenseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TowerDefensePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TowerDefensePackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case TowerDefensePackage.NIVEAU:
				sequence_Niveau(context, (Niveau) semanticObject); 
				return; 
			case TowerDefensePackage.PARTIE:
				sequence_PartieRule(context, (Partie) semanticObject); 
				return; 
			case TowerDefensePackage.PARTIE_ELEMENT:
				sequence_PartieElement(context, (PartieElement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (name=ID parties+=PartieRule*)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Niveau returns Niveau
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Niveau(ISerializationContext context, Niveau semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TowerDefensePackage.Literals.NIVEAU__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TowerDefensePackage.Literals.NIVEAU__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNiveauAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PartieElement returns PartieElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PartieElement(ISerializationContext context, PartieElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TowerDefensePackage.Literals.PARTIE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TowerDefensePackage.Literals.PARTIE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartieElementAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PartieRule returns Partie
	 *
	 * Constraint:
	 *     (name=ID partiesElements+=PartieElement* niveaux+=Niveau*)
	 */
	protected void sequence_PartieRule(ISerializationContext context, Partie semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
