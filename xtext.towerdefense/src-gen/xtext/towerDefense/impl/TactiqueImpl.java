/**
 * generated by Xtext 2.12.0
 */
package xtext.towerDefense.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.towerDefense.Tactique;
import xtext.towerDefense.TowerDefensePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tactique</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.towerDefense.impl.TactiqueImpl#getProche <em>Proche</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.TactiqueImpl#getFaible <em>Faible</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.TactiqueImpl#getFort <em>Fort</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TactiqueImpl extends MinimalEObjectImpl.Container implements Tactique
{
  /**
   * The default value of the '{@link #getProche() <em>Proche</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProche()
   * @generated
   * @ordered
   */
  protected static final String PROCHE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProche() <em>Proche</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProche()
   * @generated
   * @ordered
   */
  protected String proche = PROCHE_EDEFAULT;

  /**
   * The default value of the '{@link #getFaible() <em>Faible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaible()
   * @generated
   * @ordered
   */
  protected static final String FAIBLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFaible() <em>Faible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaible()
   * @generated
   * @ordered
   */
  protected String faible = FAIBLE_EDEFAULT;

  /**
   * The default value of the '{@link #getFort() <em>Fort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFort()
   * @generated
   * @ordered
   */
  protected static final String FORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFort() <em>Fort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFort()
   * @generated
   * @ordered
   */
  protected String fort = FORT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TactiqueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TowerDefensePackage.Literals.TACTIQUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getProche()
  {
    return proche;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProche(String newProche)
  {
    String oldProche = proche;
    proche = newProche;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.TACTIQUE__PROCHE, oldProche, proche));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFaible()
  {
    return faible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFaible(String newFaible)
  {
    String oldFaible = faible;
    faible = newFaible;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.TACTIQUE__FAIBLE, oldFaible, faible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFort()
  {
    return fort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFort(String newFort)
  {
    String oldFort = fort;
    fort = newFort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.TACTIQUE__FORT, oldFort, fort));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TowerDefensePackage.TACTIQUE__PROCHE:
        return getProche();
      case TowerDefensePackage.TACTIQUE__FAIBLE:
        return getFaible();
      case TowerDefensePackage.TACTIQUE__FORT:
        return getFort();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TowerDefensePackage.TACTIQUE__PROCHE:
        setProche((String)newValue);
        return;
      case TowerDefensePackage.TACTIQUE__FAIBLE:
        setFaible((String)newValue);
        return;
      case TowerDefensePackage.TACTIQUE__FORT:
        setFort((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.TACTIQUE__PROCHE:
        setProche(PROCHE_EDEFAULT);
        return;
      case TowerDefensePackage.TACTIQUE__FAIBLE:
        setFaible(FAIBLE_EDEFAULT);
        return;
      case TowerDefensePackage.TACTIQUE__FORT:
        setFort(FORT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.TACTIQUE__PROCHE:
        return PROCHE_EDEFAULT == null ? proche != null : !PROCHE_EDEFAULT.equals(proche);
      case TowerDefensePackage.TACTIQUE__FAIBLE:
        return FAIBLE_EDEFAULT == null ? faible != null : !FAIBLE_EDEFAULT.equals(faible);
      case TowerDefensePackage.TACTIQUE__FORT:
        return FORT_EDEFAULT == null ? fort != null : !FORT_EDEFAULT.equals(fort);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (proche: ");
    result.append(proche);
    result.append(", faible: ");
    result.append(faible);
    result.append(", fort: ");
    result.append(fort);
    result.append(')');
    return result.toString();
  }

} //TactiqueImpl
