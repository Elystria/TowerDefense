/**
 * generated by Xtext 2.12.0
 */
package xtext.towerDefense.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.towerDefense.Case;
import xtext.towerDefense.Energie;
import xtext.towerDefense.Obstacle;
import xtext.towerDefense.Tactique;
import xtext.towerDefense.TowerDefensePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Obstacle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getName <em>Name</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getCampement <em>Campement</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getQuantiteEnergieMax <em>Quantite Energie Max</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getQuantiteEnergieCourant <em>Quantite Energie Courant</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getPontsAction <em>Ponts Action</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getTactique <em>Tactique</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObstacleImpl extends MinimalEObjectImpl.Container implements Obstacle
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCampement() <em>Campement</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCampement()
   * @generated
   * @ordered
   */
  protected Case campement;

  /**
   * The cached value of the '{@link #getQuantiteEnergieMax() <em>Quantite Energie Max</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantiteEnergieMax()
   * @generated
   * @ordered
   */
  protected Energie quantiteEnergieMax;

  /**
   * The cached value of the '{@link #getQuantiteEnergieCourant() <em>Quantite Energie Courant</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantiteEnergieCourant()
   * @generated
   * @ordered
   */
  protected Energie quantiteEnergieCourant;

  /**
   * The cached value of the '{@link #getPontsAction() <em>Ponts Action</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPontsAction()
   * @generated
   * @ordered
   */
  protected Energie pontsAction;

  /**
   * The cached value of the '{@link #getTactique() <em>Tactique</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTactique()
   * @generated
   * @ordered
   */
  protected Tactique tactique;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObstacleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TowerDefensePackage.Literals.OBSTACLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case getCampement()
  {
    if (campement != null && campement.eIsProxy())
    {
      InternalEObject oldCampement = (InternalEObject)campement;
      campement = (Case)eResolveProxy(oldCampement);
      if (campement != oldCampement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__CAMPEMENT, oldCampement, campement));
      }
    }
    return campement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case basicGetCampement()
  {
    return campement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCampement(Case newCampement)
  {
    Case oldCampement = campement;
    campement = newCampement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__CAMPEMENT, oldCampement, campement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie getQuantiteEnergieMax()
  {
    if (quantiteEnergieMax != null && quantiteEnergieMax.eIsProxy())
    {
      InternalEObject oldQuantiteEnergieMax = (InternalEObject)quantiteEnergieMax;
      quantiteEnergieMax = (Energie)eResolveProxy(oldQuantiteEnergieMax);
      if (quantiteEnergieMax != oldQuantiteEnergieMax)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX, oldQuantiteEnergieMax, quantiteEnergieMax));
      }
    }
    return quantiteEnergieMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie basicGetQuantiteEnergieMax()
  {
    return quantiteEnergieMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQuantiteEnergieMax(Energie newQuantiteEnergieMax)
  {
    Energie oldQuantiteEnergieMax = quantiteEnergieMax;
    quantiteEnergieMax = newQuantiteEnergieMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX, oldQuantiteEnergieMax, quantiteEnergieMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie getQuantiteEnergieCourant()
  {
    if (quantiteEnergieCourant != null && quantiteEnergieCourant.eIsProxy())
    {
      InternalEObject oldQuantiteEnergieCourant = (InternalEObject)quantiteEnergieCourant;
      quantiteEnergieCourant = (Energie)eResolveProxy(oldQuantiteEnergieCourant);
      if (quantiteEnergieCourant != oldQuantiteEnergieCourant)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT, oldQuantiteEnergieCourant, quantiteEnergieCourant));
      }
    }
    return quantiteEnergieCourant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie basicGetQuantiteEnergieCourant()
  {
    return quantiteEnergieCourant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQuantiteEnergieCourant(Energie newQuantiteEnergieCourant)
  {
    Energie oldQuantiteEnergieCourant = quantiteEnergieCourant;
    quantiteEnergieCourant = newQuantiteEnergieCourant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT, oldQuantiteEnergieCourant, quantiteEnergieCourant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie getPontsAction()
  {
    if (pontsAction != null && pontsAction.eIsProxy())
    {
      InternalEObject oldPontsAction = (InternalEObject)pontsAction;
      pontsAction = (Energie)eResolveProxy(oldPontsAction);
      if (pontsAction != oldPontsAction)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__PONTS_ACTION, oldPontsAction, pontsAction));
      }
    }
    return pontsAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie basicGetPontsAction()
  {
    return pontsAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPontsAction(Energie newPontsAction)
  {
    Energie oldPontsAction = pontsAction;
    pontsAction = newPontsAction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__PONTS_ACTION, oldPontsAction, pontsAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tactique getTactique()
  {
    return tactique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTactique(Tactique newTactique, NotificationChain msgs)
  {
    Tactique oldTactique = tactique;
    tactique = newTactique;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__TACTIQUE, oldTactique, newTactique);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTactique(Tactique newTactique)
  {
    if (newTactique != tactique)
    {
      NotificationChain msgs = null;
      if (tactique != null)
        msgs = ((InternalEObject)tactique).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TowerDefensePackage.OBSTACLE__TACTIQUE, null, msgs);
      if (newTactique != null)
        msgs = ((InternalEObject)newTactique).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TowerDefensePackage.OBSTACLE__TACTIQUE, null, msgs);
      msgs = basicSetTactique(newTactique, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__TACTIQUE, newTactique, newTactique));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        return basicSetTactique(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__NAME:
        return getName();
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        if (resolve) return getCampement();
        return basicGetCampement();
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        if (resolve) return getQuantiteEnergieMax();
        return basicGetQuantiteEnergieMax();
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT:
        if (resolve) return getQuantiteEnergieCourant();
        return basicGetQuantiteEnergieCourant();
      case TowerDefensePackage.OBSTACLE__PONTS_ACTION:
        if (resolve) return getPontsAction();
        return basicGetPontsAction();
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        return getTactique();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__NAME:
        setName((String)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        setCampement((Case)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        setQuantiteEnergieMax((Energie)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT:
        setQuantiteEnergieCourant((Energie)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__PONTS_ACTION:
        setPontsAction((Energie)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        setTactique((Tactique)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        setCampement((Case)null);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        setQuantiteEnergieMax((Energie)null);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT:
        setQuantiteEnergieCourant((Energie)null);
        return;
      case TowerDefensePackage.OBSTACLE__PONTS_ACTION:
        setPontsAction((Energie)null);
        return;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        setTactique((Tactique)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        return campement != null;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        return quantiteEnergieMax != null;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_COURANT:
        return quantiteEnergieCourant != null;
      case TowerDefensePackage.OBSTACLE__PONTS_ACTION:
        return pontsAction != null;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        return tactique != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ObstacleImpl
