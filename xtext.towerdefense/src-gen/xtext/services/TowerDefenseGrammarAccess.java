/*
 * generated by Xtext 2.12.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TowerDefenseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class JeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Jeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJeuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesPartieParserRuleCall_3_0 = (RuleCall)cPartiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Jeu:
		//	'Jeu' name=ID '{'
		//	parties+=Partie*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Jeu' name=ID '{' parties+=Partie* '}'
		public Group getGroup() { return cGroup; }
		
		//'Jeu'
		public Keyword getJeuKeyword_0() { return cJeuKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parties+=Partie*
		public Assignment getPartiesAssignment_3() { return cPartiesAssignment_3; }
		
		//Partie
		public RuleCall getPartiesPartieParserRuleCall_3_0() { return cPartiesPartieParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PartieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Partie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartieKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesElementsPartieElementParserRuleCall_3_0 = (RuleCall)cPartiesElementsAssignment_3.eContents().get(0);
		private final Assignment cNiveauxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNiveauxNiveauParserRuleCall_4_0 = (RuleCall)cNiveauxAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Partie:
		//	'Partie' name=ID '{'
		//	partiesElements+=PartieElement*
		//	niveaux+=Niveau*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Partie' name=ID '{' partiesElements+=PartieElement* niveaux+=Niveau* '}'
		public Group getGroup() { return cGroup; }
		
		//'Partie'
		public Keyword getPartieKeyword_0() { return cPartieKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//partiesElements+=PartieElement*
		public Assignment getPartiesElementsAssignment_3() { return cPartiesElementsAssignment_3; }
		
		//PartieElement
		public RuleCall getPartiesElementsPartieElementParserRuleCall_3_0() { return cPartiesElementsPartieElementParserRuleCall_3_0; }
		
		//niveaux+=Niveau*
		public Assignment getNiveauxAssignment_4() { return cNiveauxAssignment_4; }
		
		//Niveau
		public RuleCall getNiveauxNiveauParserRuleCall_4_0() { return cNiveauxNiveauParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PartieElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.PartieElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObstacleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cObstacleObstacleKeyword_0_0 = (Keyword)cObstacleAssignment_0.eContents().get(0);
		private final Assignment cMobileAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMobileMobileKeyword_1_0 = (Keyword)cMobileAssignment_1.eContents().get(0);
		private final Assignment cProjectileAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cProjectileProjectileKeyword_2_0 = (Keyword)cProjectileAssignment_2.eContents().get(0);
		private final Assignment cNatureAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNatureNatureKeyword_3_0 = (Keyword)cNatureAssignment_3.eContents().get(0);
		
		//PartieElement:
		//	Obstacle='Obstacle' | Mobile='Mobile' | Projectile='Projectile' | Nature='Nature';
		@Override public ParserRule getRule() { return rule; }
		
		//Obstacle='Obstacle' | Mobile='Mobile' | Projectile='Projectile' | Nature='Nature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Obstacle='Obstacle'
		public Assignment getObstacleAssignment_0() { return cObstacleAssignment_0; }
		
		//'Obstacle'
		public Keyword getObstacleObstacleKeyword_0_0() { return cObstacleObstacleKeyword_0_0; }
		
		//Mobile='Mobile'
		public Assignment getMobileAssignment_1() { return cMobileAssignment_1; }
		
		//'Mobile'
		public Keyword getMobileMobileKeyword_1_0() { return cMobileMobileKeyword_1_0; }
		
		//Projectile='Projectile'
		public Assignment getProjectileAssignment_2() { return cProjectileAssignment_2; }
		
		//'Projectile'
		public Keyword getProjectileProjectileKeyword_2_0() { return cProjectileProjectileKeyword_2_0; }
		
		//Nature='Nature'
		public Assignment getNatureAssignment_3() { return cNatureAssignment_3; }
		
		//'Nature'
		public Keyword getNatureNatureKeyword_3_0() { return cNatureNatureKeyword_3_0; }
	}
	public class EnergieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Energie");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInfiniAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cInfiniInfiniKeyword_0_0 = (Keyword)cInfiniAssignment_0.eContents().get(0);
		private final Assignment cValeurAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValeurINTTerminalRuleCall_1_0 = (RuleCall)cValeurAssignment_1.eContents().get(0);
		
		//Energie:
		//	infini?='infini' | valeur=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//infini?='infini' | valeur=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//infini?='infini'
		public Assignment getInfiniAssignment_0() { return cInfiniAssignment_0; }
		
		//'infini'
		public Keyword getInfiniInfiniKeyword_0_0() { return cInfiniInfiniKeyword_0_0; }
		
		//valeur=INT
		public Assignment getValeurAssignment_1() { return cValeurAssignment_1; }
		
		//INT
		public RuleCall getValeurINTTerminalRuleCall_1_0() { return cValeurINTTerminalRuleCall_1_0; }
	}
	public class ObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Obstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCampementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCampementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCampementCaseCrossReference_3_0 = (CrossReference)cCampementAssignment_3.eContents().get(0);
		private final RuleCall cCampementCaseIDTerminalRuleCall_3_0_1 = (RuleCall)cCampementCaseCrossReference_3_0.eContents().get(1);
		private final Keyword cPVmaxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cQuantiteEnergieMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cQuantiteEnergieMaxEnergieCrossReference_5_0 = (CrossReference)cQuantiteEnergieMaxAssignment_5.eContents().get(0);
		private final RuleCall cQuantiteEnergieMaxEnergieIDTerminalRuleCall_5_0_1 = (RuleCall)cQuantiteEnergieMaxEnergieCrossReference_5_0.eContents().get(1);
		private final Keyword cPVKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cQuantiteEnergieCourantAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cQuantiteEnergieCourantEnergieCrossReference_7_0 = (CrossReference)cQuantiteEnergieCourantAssignment_7.eContents().get(0);
		private final RuleCall cQuantiteEnergieCourantEnergieIDTerminalRuleCall_7_0_1 = (RuleCall)cQuantiteEnergieCourantEnergieCrossReference_7_0.eContents().get(1);
		private final Keyword cPAKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPontsActionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cPontsActionEnergieCrossReference_9_0 = (CrossReference)cPontsActionAssignment_9.eContents().get(0);
		private final RuleCall cPontsActionEnergieIDTerminalRuleCall_9_0_1 = (RuleCall)cPontsActionEnergieCrossReference_9_0.eContents().get(1);
		private final Assignment cTactiqueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTactiqueTactiqueParserRuleCall_10_0 = (RuleCall)cTactiqueAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Obstacle:
		//	name=ID '{'
		//	'Campement' campement=[Case]
		//	'PVmax' quantiteEnergieMax=[Energie]
		//	'PV' quantiteEnergieCourant=[Energie]
		//	'PA' pontsAction=[Energie] tactique=Tactique
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'Campement' campement=[Case] 'PVmax' quantiteEnergieMax=[Energie] 'PV' quantiteEnergieCourant=[Energie] 'PA'
		//pontsAction=[Energie] tactique=Tactique '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Campement'
		public Keyword getCampementKeyword_2() { return cCampementKeyword_2; }
		
		//campement=[Case]
		public Assignment getCampementAssignment_3() { return cCampementAssignment_3; }
		
		//[Case]
		public CrossReference getCampementCaseCrossReference_3_0() { return cCampementCaseCrossReference_3_0; }
		
		//ID
		public RuleCall getCampementCaseIDTerminalRuleCall_3_0_1() { return cCampementCaseIDTerminalRuleCall_3_0_1; }
		
		//'PVmax'
		public Keyword getPVmaxKeyword_4() { return cPVmaxKeyword_4; }
		
		//quantiteEnergieMax=[Energie]
		public Assignment getQuantiteEnergieMaxAssignment_5() { return cQuantiteEnergieMaxAssignment_5; }
		
		//[Energie]
		public CrossReference getQuantiteEnergieMaxEnergieCrossReference_5_0() { return cQuantiteEnergieMaxEnergieCrossReference_5_0; }
		
		//ID
		public RuleCall getQuantiteEnergieMaxEnergieIDTerminalRuleCall_5_0_1() { return cQuantiteEnergieMaxEnergieIDTerminalRuleCall_5_0_1; }
		
		//'PV'
		public Keyword getPVKeyword_6() { return cPVKeyword_6; }
		
		//quantiteEnergieCourant=[Energie]
		public Assignment getQuantiteEnergieCourantAssignment_7() { return cQuantiteEnergieCourantAssignment_7; }
		
		//[Energie]
		public CrossReference getQuantiteEnergieCourantEnergieCrossReference_7_0() { return cQuantiteEnergieCourantEnergieCrossReference_7_0; }
		
		//ID
		public RuleCall getQuantiteEnergieCourantEnergieIDTerminalRuleCall_7_0_1() { return cQuantiteEnergieCourantEnergieIDTerminalRuleCall_7_0_1; }
		
		//'PA'
		public Keyword getPAKeyword_8() { return cPAKeyword_8; }
		
		//pontsAction=[Energie]
		public Assignment getPontsActionAssignment_9() { return cPontsActionAssignment_9; }
		
		//[Energie]
		public CrossReference getPontsActionEnergieCrossReference_9_0() { return cPontsActionEnergieCrossReference_9_0; }
		
		//ID
		public RuleCall getPontsActionEnergieIDTerminalRuleCall_9_0_1() { return cPontsActionEnergieIDTerminalRuleCall_9_0_1; }
		
		//tactique=Tactique
		public Assignment getTactiqueAssignment_10() { return cTactiqueAssignment_10; }
		
		//Tactique
		public RuleCall getTactiqueTactiqueParserRuleCall_10_0() { return cTactiqueTactiqueParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class TactiqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Tactique");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTactiqueKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cProcheAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cProcheProcheFirstKeyword_0_1_0 = (Keyword)cProcheAssignment_0_1.eContents().get(0);
		private final Assignment cFaibleAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFaibleFaibleFirstKeyword_1_0 = (Keyword)cFaibleAssignment_1.eContents().get(0);
		private final Assignment cFortAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cFortFortFirstKeyword_2_0 = (Keyword)cFortAssignment_2.eContents().get(0);
		
		//Tactique:
		//	'Tactique'
		//	proche='procheFirst' | faible='faibleFirst' | fort='fortFirst';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tactique' proche='procheFirst' | faible='faibleFirst' | fort='fortFirst'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Tactique' proche='procheFirst'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Tactique'
		public Keyword getTactiqueKeyword_0_0() { return cTactiqueKeyword_0_0; }
		
		//proche='procheFirst'
		public Assignment getProcheAssignment_0_1() { return cProcheAssignment_0_1; }
		
		//'procheFirst'
		public Keyword getProcheProcheFirstKeyword_0_1_0() { return cProcheProcheFirstKeyword_0_1_0; }
		
		//faible='faibleFirst'
		public Assignment getFaibleAssignment_1() { return cFaibleAssignment_1; }
		
		//'faibleFirst'
		public Keyword getFaibleFaibleFirstKeyword_1_0() { return cFaibleFaibleFirstKeyword_1_0; }
		
		//fort='fortFirst'
		public Assignment getFortAssignment_2() { return cFortAssignment_2; }
		
		//'fortFirst'
		public Keyword getFortFortFirstKeyword_2_0() { return cFortFortFirstKeyword_2_0; }
	}
	public class MobileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Mobile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForceINTTerminalRuleCall_3_0 = (RuleCall)cForceAssignment_3.eContents().get(0);
		private final Keyword cVKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVolumeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVolumeINTTerminalRuleCall_5_0 = (RuleCall)cVolumeAssignment_5.eContents().get(0);
		private final Keyword cNumVagueKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNumVagueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNumVagueINTTerminalRuleCall_7_0 = (RuleCall)cNumVagueAssignment_7.eContents().get(0);
		private final Keyword cInKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCaseEntreeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cCaseEntreeCaseCrossReference_9_0 = (CrossReference)cCaseEntreeAssignment_9.eContents().get(0);
		private final RuleCall cCaseEntreeCaseIDTerminalRuleCall_9_0_1 = (RuleCall)cCaseEntreeCaseCrossReference_9_0.eContents().get(1);
		private final Keyword cOutKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cCaseSortieAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cCaseSortieCaseCrossReference_11_0 = (CrossReference)cCaseSortieAssignment_11.eContents().get(0);
		private final RuleCall cCaseSortieCaseIDTerminalRuleCall_11_0_1 = (RuleCall)cCaseSortieCaseCrossReference_11_0.eContents().get(1);
		private final Keyword cPVmaxKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cQuantiteEnergieMaxAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final CrossReference cQuantiteEnergieMaxEnergieCrossReference_13_0 = (CrossReference)cQuantiteEnergieMaxAssignment_13.eContents().get(0);
		private final RuleCall cQuantiteEnergieMaxEnergieIDTerminalRuleCall_13_0_1 = (RuleCall)cQuantiteEnergieMaxEnergieCrossReference_13_0.eContents().get(1);
		private final Keyword cPVKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cQuantiteEnergieCourantAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cQuantiteEnergieCourantEnergieCrossReference_15_0 = (CrossReference)cQuantiteEnergieCourantAssignment_15.eContents().get(0);
		private final RuleCall cQuantiteEnergieCourantEnergieIDTerminalRuleCall_15_0_1 = (RuleCall)cQuantiteEnergieCourantEnergieCrossReference_15_0.eContents().get(1);
		private final Keyword cPAKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cPointsActionAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final CrossReference cPointsActionEnergieCrossReference_17_0 = (CrossReference)cPointsActionAssignment_17.eContents().get(0);
		private final RuleCall cPointsActionEnergieIDTerminalRuleCall_17_0_1 = (RuleCall)cPointsActionEnergieCrossReference_17_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Mobile:
		//	name=ID '{'
		//	'F' force=INT
		//	'V' volume=INT
		//	'NumVague' numVague=INT
		//	'In' caseEntree=[Case]
		//	'Out' caseSortie=[Case]
		//	'PVmax' quantiteEnergieMax=[Energie]
		//	'PV' quantiteEnergieCourant=[Energie]
		//	'PA' pointsAction=[Energie]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'F' force=INT 'V' volume=INT 'NumVague' numVague=INT 'In' caseEntree=[Case] 'Out' caseSortie=[Case] 'PVmax'
		//quantiteEnergieMax=[Energie] 'PV' quantiteEnergieCourant=[Energie] 'PA' pointsAction=[Energie] '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'F'
		public Keyword getFKeyword_2() { return cFKeyword_2; }
		
		//force=INT
		public Assignment getForceAssignment_3() { return cForceAssignment_3; }
		
		//INT
		public RuleCall getForceINTTerminalRuleCall_3_0() { return cForceINTTerminalRuleCall_3_0; }
		
		//'V'
		public Keyword getVKeyword_4() { return cVKeyword_4; }
		
		//volume=INT
		public Assignment getVolumeAssignment_5() { return cVolumeAssignment_5; }
		
		//INT
		public RuleCall getVolumeINTTerminalRuleCall_5_0() { return cVolumeINTTerminalRuleCall_5_0; }
		
		//'NumVague'
		public Keyword getNumVagueKeyword_6() { return cNumVagueKeyword_6; }
		
		//numVague=INT
		public Assignment getNumVagueAssignment_7() { return cNumVagueAssignment_7; }
		
		//INT
		public RuleCall getNumVagueINTTerminalRuleCall_7_0() { return cNumVagueINTTerminalRuleCall_7_0; }
		
		//'In'
		public Keyword getInKeyword_8() { return cInKeyword_8; }
		
		//caseEntree=[Case]
		public Assignment getCaseEntreeAssignment_9() { return cCaseEntreeAssignment_9; }
		
		//[Case]
		public CrossReference getCaseEntreeCaseCrossReference_9_0() { return cCaseEntreeCaseCrossReference_9_0; }
		
		//ID
		public RuleCall getCaseEntreeCaseIDTerminalRuleCall_9_0_1() { return cCaseEntreeCaseIDTerminalRuleCall_9_0_1; }
		
		//'Out'
		public Keyword getOutKeyword_10() { return cOutKeyword_10; }
		
		//caseSortie=[Case]
		public Assignment getCaseSortieAssignment_11() { return cCaseSortieAssignment_11; }
		
		//[Case]
		public CrossReference getCaseSortieCaseCrossReference_11_0() { return cCaseSortieCaseCrossReference_11_0; }
		
		//ID
		public RuleCall getCaseSortieCaseIDTerminalRuleCall_11_0_1() { return cCaseSortieCaseIDTerminalRuleCall_11_0_1; }
		
		//'PVmax'
		public Keyword getPVmaxKeyword_12() { return cPVmaxKeyword_12; }
		
		//quantiteEnergieMax=[Energie]
		public Assignment getQuantiteEnergieMaxAssignment_13() { return cQuantiteEnergieMaxAssignment_13; }
		
		//[Energie]
		public CrossReference getQuantiteEnergieMaxEnergieCrossReference_13_0() { return cQuantiteEnergieMaxEnergieCrossReference_13_0; }
		
		//ID
		public RuleCall getQuantiteEnergieMaxEnergieIDTerminalRuleCall_13_0_1() { return cQuantiteEnergieMaxEnergieIDTerminalRuleCall_13_0_1; }
		
		//'PV'
		public Keyword getPVKeyword_14() { return cPVKeyword_14; }
		
		//quantiteEnergieCourant=[Energie]
		public Assignment getQuantiteEnergieCourantAssignment_15() { return cQuantiteEnergieCourantAssignment_15; }
		
		//[Energie]
		public CrossReference getQuantiteEnergieCourantEnergieCrossReference_15_0() { return cQuantiteEnergieCourantEnergieCrossReference_15_0; }
		
		//ID
		public RuleCall getQuantiteEnergieCourantEnergieIDTerminalRuleCall_15_0_1() { return cQuantiteEnergieCourantEnergieIDTerminalRuleCall_15_0_1; }
		
		//'PA'
		public Keyword getPAKeyword_16() { return cPAKeyword_16; }
		
		//pointsAction=[Energie]
		public Assignment getPointsActionAssignment_17() { return cPointsActionAssignment_17; }
		
		//[Energie]
		public CrossReference getPointsActionEnergieCrossReference_17_0() { return cPointsActionEnergieCrossReference_17_0; }
		
		//ID
		public RuleCall getPointsActionEnergieIDTerminalRuleCall_17_0_1() { return cPointsActionEnergieIDTerminalRuleCall_17_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class ProjectileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Projectile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPorteeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPorteeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPorteeINTTerminalRuleCall_3_0 = (RuleCall)cPorteeAssignment_3.eContents().get(0);
		private final Keyword cMasseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMasseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMasseINTTerminalRuleCall_5_0 = (RuleCall)cMasseAssignment_5.eContents().get(0);
		private final Keyword cVitesseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVitesseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVitesseINTTerminalRuleCall_7_0 = (RuleCall)cVitesseAssignment_7.eContents().get(0);
		private final Keyword cPositionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCaseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cCaseCaseCrossReference_9_0 = (CrossReference)cCaseAssignment_9.eContents().get(0);
		private final RuleCall cCaseCaseIDTerminalRuleCall_9_0_1 = (RuleCall)cCaseCaseCrossReference_9_0.eContents().get(1);
		private final Keyword cDirectionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cCibleAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cCibleCaseCrossReference_11_0 = (CrossReference)cCibleAssignment_11.eContents().get(0);
		private final RuleCall cCibleCaseIDTerminalRuleCall_11_0_1 = (RuleCall)cCibleCaseCrossReference_11_0.eContents().get(1);
		private final Keyword cDegatKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cDegatAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final CrossReference cDegatEnergieCrossReference_13_0 = (CrossReference)cDegatAssignment_13.eContents().get(0);
		private final RuleCall cDegatEnergieIDTerminalRuleCall_13_0_1 = (RuleCall)cDegatEnergieCrossReference_13_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Projectile:
		//	name=ID '{'
		//	'Portee' portee=INT
		//	'Masse' masse=INT
		//	'Vitesse' vitesse=INT
		//	'Position' case=[Case]
		//	'Direction' cible=[Case]
		//	'Degat' degat=[Energie]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'Portee' portee=INT 'Masse' masse=INT 'Vitesse' vitesse=INT 'Position' case=[Case] 'Direction' cible=[Case]
		//'Degat' degat=[Energie] '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Portee'
		public Keyword getPorteeKeyword_2() { return cPorteeKeyword_2; }
		
		//portee=INT
		public Assignment getPorteeAssignment_3() { return cPorteeAssignment_3; }
		
		//INT
		public RuleCall getPorteeINTTerminalRuleCall_3_0() { return cPorteeINTTerminalRuleCall_3_0; }
		
		//'Masse'
		public Keyword getMasseKeyword_4() { return cMasseKeyword_4; }
		
		//masse=INT
		public Assignment getMasseAssignment_5() { return cMasseAssignment_5; }
		
		//INT
		public RuleCall getMasseINTTerminalRuleCall_5_0() { return cMasseINTTerminalRuleCall_5_0; }
		
		//'Vitesse'
		public Keyword getVitesseKeyword_6() { return cVitesseKeyword_6; }
		
		//vitesse=INT
		public Assignment getVitesseAssignment_7() { return cVitesseAssignment_7; }
		
		//INT
		public RuleCall getVitesseINTTerminalRuleCall_7_0() { return cVitesseINTTerminalRuleCall_7_0; }
		
		//'Position'
		public Keyword getPositionKeyword_8() { return cPositionKeyword_8; }
		
		//case=[Case]
		public Assignment getCaseAssignment_9() { return cCaseAssignment_9; }
		
		//[Case]
		public CrossReference getCaseCaseCrossReference_9_0() { return cCaseCaseCrossReference_9_0; }
		
		//ID
		public RuleCall getCaseCaseIDTerminalRuleCall_9_0_1() { return cCaseCaseIDTerminalRuleCall_9_0_1; }
		
		//'Direction'
		public Keyword getDirectionKeyword_10() { return cDirectionKeyword_10; }
		
		//cible=[Case]
		public Assignment getCibleAssignment_11() { return cCibleAssignment_11; }
		
		//[Case]
		public CrossReference getCibleCaseCrossReference_11_0() { return cCibleCaseCrossReference_11_0; }
		
		//ID
		public RuleCall getCibleCaseIDTerminalRuleCall_11_0_1() { return cCibleCaseIDTerminalRuleCall_11_0_1; }
		
		//'Degat'
		public Keyword getDegatKeyword_12() { return cDegatKeyword_12; }
		
		//degat=[Energie]
		public Assignment getDegatAssignment_13() { return cDegatAssignment_13; }
		
		//[Energie]
		public CrossReference getDegatEnergieCrossReference_13_0() { return cDegatEnergieCrossReference_13_0; }
		
		//ID
		public RuleCall getDegatEnergieIDTerminalRuleCall_13_0_1() { return cDegatEnergieIDTerminalRuleCall_13_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class NatureTerrainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.NatureTerrain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVolumeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolumeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVolumeINTTerminalRuleCall_3_0 = (RuleCall)cVolumeAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTYPE_TERRAINEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cFatigueEntreeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFatigueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cFatigueEnergieCrossReference_7_0 = (CrossReference)cFatigueAssignment_7.eContents().get(0);
		private final RuleCall cFatigueEnergieIDTerminalRuleCall_7_0_1 = (RuleCall)cFatigueEnergieCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//NatureTerrain:
		//	name=ID '{'
		//	'Volume' volume=INT
		//	'Type' type=TYPE_TERRAIN
		//	'FatigueEntree' fatigue=[Energie]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'Volume' volume=INT 'Type' type=TYPE_TERRAIN 'FatigueEntree' fatigue=[Energie] '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Volume'
		public Keyword getVolumeKeyword_2() { return cVolumeKeyword_2; }
		
		//volume=INT
		public Assignment getVolumeAssignment_3() { return cVolumeAssignment_3; }
		
		//INT
		public RuleCall getVolumeINTTerminalRuleCall_3_0() { return cVolumeINTTerminalRuleCall_3_0; }
		
		//'Type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=TYPE_TERRAIN
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//TYPE_TERRAIN
		public RuleCall getTypeTYPE_TERRAINEnumRuleCall_5_0() { return cTypeTYPE_TERRAINEnumRuleCall_5_0; }
		
		//'FatigueEntree'
		public Keyword getFatigueEntreeKeyword_6() { return cFatigueEntreeKeyword_6; }
		
		//fatigue=[Energie]
		public Assignment getFatigueAssignment_7() { return cFatigueAssignment_7; }
		
		//[Energie]
		public CrossReference getFatigueEnergieCrossReference_7_0() { return cFatigueEnergieCrossReference_7_0; }
		
		//ID
		public RuleCall getFatigueEnergieIDTerminalRuleCall_7_0_1() { return cFatigueEnergieIDTerminalRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class NiveauElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Niveau");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNiveauKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDifficulteKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDifficulteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDifficulteDifficulteEnumRuleCall_4_0 = (RuleCall)cDifficulteAssignment_4.eContents().get(0);
		private final Keyword cDureePausesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDureePauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDureePauseINTTerminalRuleCall_6_0 = (RuleCall)cDureePauseAssignment_6.eContents().get(0);
		private final Keyword cArgentKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cArgentAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cArgentINTTerminalRuleCall_8_0 = (RuleCall)cArgentAssignment_8.eContents().get(0);
		private final Keyword cMobSortisMaxKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMobSortisLimiteAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMobSortisLimiteINTTerminalRuleCall_10_0 = (RuleCall)cMobSortisLimiteAssignment_10.eContents().get(0);
		private final Assignment cTerrainAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTerrainTerrainDeJeuParserRuleCall_11_0 = (RuleCall)cTerrainAssignment_11.eContents().get(0);
		private final Keyword cVagueKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cVaguesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cVaguesVagueParserRuleCall_13_0 = (RuleCall)cVaguesAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Niveau:
		//	'Niveau' name=ID '{'
		//	'Difficulte' difficulte=Difficulte
		//	'DureePauses' dureePause=INT
		//	'Argent' argent=INT
		//	'MobSortisMax' mobSortisLimite=INT
		//	terrain=TerrainDeJeu
		//	'Vague' vagues+=Vague
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Niveau' name=ID '{' 'Difficulte' difficulte=Difficulte 'DureePauses' dureePause=INT 'Argent' argent=INT 'MobSortisMax'
		//mobSortisLimite=INT terrain=TerrainDeJeu 'Vague' vagues+=Vague '}'
		public Group getGroup() { return cGroup; }
		
		//'Niveau'
		public Keyword getNiveauKeyword_0() { return cNiveauKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Difficulte'
		public Keyword getDifficulteKeyword_3() { return cDifficulteKeyword_3; }
		
		//difficulte=Difficulte
		public Assignment getDifficulteAssignment_4() { return cDifficulteAssignment_4; }
		
		//Difficulte
		public RuleCall getDifficulteDifficulteEnumRuleCall_4_0() { return cDifficulteDifficulteEnumRuleCall_4_0; }
		
		//'DureePauses'
		public Keyword getDureePausesKeyword_5() { return cDureePausesKeyword_5; }
		
		//dureePause=INT
		public Assignment getDureePauseAssignment_6() { return cDureePauseAssignment_6; }
		
		//INT
		public RuleCall getDureePauseINTTerminalRuleCall_6_0() { return cDureePauseINTTerminalRuleCall_6_0; }
		
		//'Argent'
		public Keyword getArgentKeyword_7() { return cArgentKeyword_7; }
		
		//argent=INT
		public Assignment getArgentAssignment_8() { return cArgentAssignment_8; }
		
		//INT
		public RuleCall getArgentINTTerminalRuleCall_8_0() { return cArgentINTTerminalRuleCall_8_0; }
		
		//'MobSortisMax'
		public Keyword getMobSortisMaxKeyword_9() { return cMobSortisMaxKeyword_9; }
		
		//mobSortisLimite=INT
		public Assignment getMobSortisLimiteAssignment_10() { return cMobSortisLimiteAssignment_10; }
		
		//INT
		public RuleCall getMobSortisLimiteINTTerminalRuleCall_10_0() { return cMobSortisLimiteINTTerminalRuleCall_10_0; }
		
		//terrain=TerrainDeJeu
		public Assignment getTerrainAssignment_11() { return cTerrainAssignment_11; }
		
		//TerrainDeJeu
		public RuleCall getTerrainTerrainDeJeuParserRuleCall_11_0() { return cTerrainTerrainDeJeuParserRuleCall_11_0; }
		
		//'Vague'
		public Keyword getVagueKeyword_12() { return cVagueKeyword_12; }
		
		//vagues+=Vague
		public Assignment getVaguesAssignment_13() { return cVaguesAssignment_13; }
		
		//Vague
		public RuleCall getVaguesVagueParserRuleCall_13_0() { return cVaguesVagueParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class TerrainDeJeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.TerrainDeJeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerrainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDamierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDamierDamierCrossReference_1_0 = (CrossReference)cDamierAssignment_1.eContents().get(0);
		private final RuleCall cDamierDamierIDTerminalRuleCall_1_0_1 = (RuleCall)cDamierDamierCrossReference_1_0.eContents().get(1);
		
		//TerrainDeJeu:
		//	'Terrain'
		//	damier=[Damier];
		@Override public ParserRule getRule() { return rule; }
		
		//'Terrain' damier=[Damier]
		public Group getGroup() { return cGroup; }
		
		//'Terrain'
		public Keyword getTerrainKeyword_0() { return cTerrainKeyword_0; }
		
		//damier=[Damier]
		public Assignment getDamierAssignment_1() { return cDamierAssignment_1; }
		
		//[Damier]
		public CrossReference getDamierDamierCrossReference_1_0() { return cDamierDamierCrossReference_1_0; }
		
		//ID
		public RuleCall getDamierDamierIDTerminalRuleCall_1_0_1() { return cDamierDamierIDTerminalRuleCall_1_0_1; }
	}
	public class DamierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Damier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDamierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLignesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNbLignesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNbLignesINTTerminalRuleCall_4_0 = (RuleCall)cNbLignesAssignment_4.eContents().get(0);
		private final Keyword cColonnesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNbColonnesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNbColonnesINTTerminalRuleCall_6_0 = (RuleCall)cNbColonnesAssignment_6.eContents().get(0);
		private final Keyword cCasesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCasesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCasesCaseParserRuleCall_8_0 = (RuleCall)cCasesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Damier:
		//	'Damier' name=ID '{'
		//	'Lignes' nbLignes=INT
		//	'Colonnes' nbColonnes=INT
		//	'Cases' cases+=Case*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Damier' name=ID '{' 'Lignes' nbLignes=INT 'Colonnes' nbColonnes=INT 'Cases' cases+=Case* '}'
		public Group getGroup() { return cGroup; }
		
		//'Damier'
		public Keyword getDamierKeyword_0() { return cDamierKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Lignes'
		public Keyword getLignesKeyword_3() { return cLignesKeyword_3; }
		
		//nbLignes=INT
		public Assignment getNbLignesAssignment_4() { return cNbLignesAssignment_4; }
		
		//INT
		public RuleCall getNbLignesINTTerminalRuleCall_4_0() { return cNbLignesINTTerminalRuleCall_4_0; }
		
		//'Colonnes'
		public Keyword getColonnesKeyword_5() { return cColonnesKeyword_5; }
		
		//nbColonnes=INT
		public Assignment getNbColonnesAssignment_6() { return cNbColonnesAssignment_6; }
		
		//INT
		public RuleCall getNbColonnesINTTerminalRuleCall_6_0() { return cNbColonnesINTTerminalRuleCall_6_0; }
		
		//'Cases'
		public Keyword getCasesKeyword_7() { return cCasesKeyword_7; }
		
		//cases+=Case*
		public Assignment getCasesAssignment_8() { return cCasesAssignment_8; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_8_0() { return cCasesCaseParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIINTTerminalRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		private final Keyword cJKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJINTTerminalRuleCall_3_0 = (RuleCall)cJAssignment_3.eContents().get(0);
		private final Assignment cNatureTerrainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNatureTerrainNatureTerrainParserRuleCall_4_0 = (RuleCall)cNatureTerrainAssignment_4.eContents().get(0);
		
		//Case:
		//	'i' i=INT
		//	'j' j=INT
		//	natureTerrain=NatureTerrain;
		@Override public ParserRule getRule() { return rule; }
		
		//'i' i=INT 'j' j=INT natureTerrain=NatureTerrain
		public Group getGroup() { return cGroup; }
		
		//'i'
		public Keyword getIKeyword_0() { return cIKeyword_0; }
		
		//i=INT
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//INT
		public RuleCall getIINTTerminalRuleCall_1_0() { return cIINTTerminalRuleCall_1_0; }
		
		//'j'
		public Keyword getJKeyword_2() { return cJKeyword_2; }
		
		//j=INT
		public Assignment getJAssignment_3() { return cJAssignment_3; }
		
		//INT
		public RuleCall getJINTTerminalRuleCall_3_0() { return cJINTTerminalRuleCall_3_0; }
		
		//natureTerrain=NatureTerrain
		public Assignment getNatureTerrainAssignment_4() { return cNatureTerrainAssignment_4; }
		
		//NatureTerrain
		public RuleCall getNatureTerrainNatureTerrainParserRuleCall_4_0() { return cNatureTerrainNatureTerrainParserRuleCall_4_0; }
	}
	public class VagueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Vague");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMobilesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMobilesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMobilesMobileCrossReference_2_0 = (CrossReference)cMobilesAssignment_2.eContents().get(0);
		private final RuleCall cMobilesMobileIDTerminalRuleCall_2_0_1 = (RuleCall)cMobilesMobileCrossReference_2_0.eContents().get(1);
		private final Keyword cObstaclesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObstaclesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObstaclesObstacleCrossReference_4_0 = (CrossReference)cObstaclesAssignment_4.eContents().get(0);
		private final RuleCall cObstaclesObstacleIDTerminalRuleCall_4_0_1 = (RuleCall)cObstaclesObstacleCrossReference_4_0.eContents().get(1);
		private final Keyword cGainKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGainVictoireAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGainVictoireINTTerminalRuleCall_6_0 = (RuleCall)cGainVictoireAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Vague:
		//	'{'
		//	'Mobiles' mobiles+=[Mobile]*
		//	'Obstacles' obstacles+=[Obstacle]*
		//	'Gain' gainVictoire=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'Mobiles' mobiles+=[Mobile]* 'Obstacles' obstacles+=[Obstacle]* 'Gain' gainVictoire=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'Mobiles'
		public Keyword getMobilesKeyword_1() { return cMobilesKeyword_1; }
		
		//mobiles+=[Mobile]*
		public Assignment getMobilesAssignment_2() { return cMobilesAssignment_2; }
		
		//[Mobile]
		public CrossReference getMobilesMobileCrossReference_2_0() { return cMobilesMobileCrossReference_2_0; }
		
		//ID
		public RuleCall getMobilesMobileIDTerminalRuleCall_2_0_1() { return cMobilesMobileIDTerminalRuleCall_2_0_1; }
		
		//'Obstacles'
		public Keyword getObstaclesKeyword_3() { return cObstaclesKeyword_3; }
		
		//obstacles+=[Obstacle]*
		public Assignment getObstaclesAssignment_4() { return cObstaclesAssignment_4; }
		
		//[Obstacle]
		public CrossReference getObstaclesObstacleCrossReference_4_0() { return cObstaclesObstacleCrossReference_4_0; }
		
		//ID
		public RuleCall getObstaclesObstacleIDTerminalRuleCall_4_0_1() { return cObstaclesObstacleIDTerminalRuleCall_4_0_1; }
		
		//'Gain'
		public Keyword getGainKeyword_5() { return cGainKeyword_5; }
		
		//gainVictoire=INT
		public Assignment getGainVictoireAssignment_6() { return cGainVictoireAssignment_6; }
		
		//INT
		public RuleCall getGainVictoireINTTerminalRuleCall_6_0() { return cGainVictoireINTTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	public class TYPE_TERRAINElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.TYPE_TERRAIN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEntreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEntreeEntreeKeyword_0_0 = (Keyword)cEntreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSortieEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSortieSortieKeyword_1_0 = (Keyword)cSortieEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCheminEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCheminCheminKeyword_2_0 = (Keyword)cCheminEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCampementEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCampementCampKeyword_3_0 = (Keyword)cCampementEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDecorationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDecorationDecoKeyword_4_0 = (Keyword)cDecorationEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TYPE_TERRAIN:
		//	entree | sortie | chemin | campement='camp' | decoration='deco';
		public EnumRule getRule() { return rule; }
		
		//entree | sortie | chemin | campement='camp' | decoration='deco'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entree
		public EnumLiteralDeclaration getEntreeEnumLiteralDeclaration_0() { return cEntreeEnumLiteralDeclaration_0; }
		
		//'entree'
		public Keyword getEntreeEntreeKeyword_0_0() { return cEntreeEntreeKeyword_0_0; }
		
		//sortie
		public EnumLiteralDeclaration getSortieEnumLiteralDeclaration_1() { return cSortieEnumLiteralDeclaration_1; }
		
		//'sortie'
		public Keyword getSortieSortieKeyword_1_0() { return cSortieSortieKeyword_1_0; }
		
		//chemin
		public EnumLiteralDeclaration getCheminEnumLiteralDeclaration_2() { return cCheminEnumLiteralDeclaration_2; }
		
		//'chemin'
		public Keyword getCheminCheminKeyword_2_0() { return cCheminCheminKeyword_2_0; }
		
		//campement='camp'
		public EnumLiteralDeclaration getCampementEnumLiteralDeclaration_3() { return cCampementEnumLiteralDeclaration_3; }
		
		//'camp'
		public Keyword getCampementCampKeyword_3_0() { return cCampementCampKeyword_3_0; }
		
		//decoration='deco'
		public EnumLiteralDeclaration getDecorationEnumLiteralDeclaration_4() { return cDecorationEnumLiteralDeclaration_4; }
		
		//'deco'
		public Keyword getDecorationDecoKeyword_4_0() { return cDecorationDecoKeyword_4_0; }
	}
	public class DifficulteElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Difficulte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFacileEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFacileFacileKeyword_0_0 = (Keyword)cFacileEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMoyenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMoyenMoyenKeyword_1_0 = (Keyword)cMoyenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDifficileEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDifficileDifficileKeyword_2_0 = (Keyword)cDifficileEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Difficulte:
		//	facile | moyen | difficile;
		public EnumRule getRule() { return rule; }
		
		//facile | moyen | difficile
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//facile
		public EnumLiteralDeclaration getFacileEnumLiteralDeclaration_0() { return cFacileEnumLiteralDeclaration_0; }
		
		//'facile'
		public Keyword getFacileFacileKeyword_0_0() { return cFacileFacileKeyword_0_0; }
		
		//moyen
		public EnumLiteralDeclaration getMoyenEnumLiteralDeclaration_1() { return cMoyenEnumLiteralDeclaration_1; }
		
		//'moyen'
		public Keyword getMoyenMoyenKeyword_1_0() { return cMoyenMoyenKeyword_1_0; }
		
		//difficile
		public EnumLiteralDeclaration getDifficileEnumLiteralDeclaration_2() { return cDifficileEnumLiteralDeclaration_2; }
		
		//'difficile'
		public Keyword getDifficileDifficileKeyword_2_0() { return cDifficileDifficileKeyword_2_0; }
	}
	
	private final JeuElements pJeu;
	private final PartieElements pPartie;
	private final PartieElementElements pPartieElement;
	private final EnergieElements pEnergie;
	private final ObstacleElements pObstacle;
	private final TactiqueElements pTactique;
	private final MobileElements pMobile;
	private final ProjectileElements pProjectile;
	private final NatureTerrainElements pNatureTerrain;
	private final TYPE_TERRAINElements eTYPE_TERRAIN;
	private final NiveauElements pNiveau;
	private final DifficulteElements eDifficulte;
	private final TerrainDeJeuElements pTerrainDeJeu;
	private final DamierElements pDamier;
	private final CaseElements pCase;
	private final VagueElements pVague;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TowerDefenseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJeu = new JeuElements();
		this.pPartie = new PartieElements();
		this.pPartieElement = new PartieElementElements();
		this.pEnergie = new EnergieElements();
		this.pObstacle = new ObstacleElements();
		this.pTactique = new TactiqueElements();
		this.pMobile = new MobileElements();
		this.pProjectile = new ProjectileElements();
		this.pNatureTerrain = new NatureTerrainElements();
		this.eTYPE_TERRAIN = new TYPE_TERRAINElements();
		this.pNiveau = new NiveauElements();
		this.eDifficulte = new DifficulteElements();
		this.pTerrainDeJeu = new TerrainDeJeuElements();
		this.pDamier = new DamierElements();
		this.pCase = new CaseElements();
		this.pVague = new VagueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.TowerDefense".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Jeu:
	//	'Jeu' name=ID '{'
	//	parties+=Partie*
	//	'}';
	public JeuElements getJeuAccess() {
		return pJeu;
	}
	
	public ParserRule getJeuRule() {
		return getJeuAccess().getRule();
	}
	
	//Partie:
	//	'Partie' name=ID '{'
	//	partiesElements+=PartieElement*
	//	niveaux+=Niveau*
	//	'}';
	public PartieElements getPartieAccess() {
		return pPartie;
	}
	
	public ParserRule getPartieRule() {
		return getPartieAccess().getRule();
	}
	
	//PartieElement:
	//	Obstacle='Obstacle' | Mobile='Mobile' | Projectile='Projectile' | Nature='Nature';
	public PartieElementElements getPartieElementAccess() {
		return pPartieElement;
	}
	
	public ParserRule getPartieElementRule() {
		return getPartieElementAccess().getRule();
	}
	
	//Energie:
	//	infini?='infini' | valeur=INT;
	public EnergieElements getEnergieAccess() {
		return pEnergie;
	}
	
	public ParserRule getEnergieRule() {
		return getEnergieAccess().getRule();
	}
	
	//Obstacle:
	//	name=ID '{'
	//	'Campement' campement=[Case]
	//	'PVmax' quantiteEnergieMax=[Energie]
	//	'PV' quantiteEnergieCourant=[Energie]
	//	'PA' pontsAction=[Energie] tactique=Tactique
	//	'}';
	public ObstacleElements getObstacleAccess() {
		return pObstacle;
	}
	
	public ParserRule getObstacleRule() {
		return getObstacleAccess().getRule();
	}
	
	//Tactique:
	//	'Tactique'
	//	proche='procheFirst' | faible='faibleFirst' | fort='fortFirst';
	public TactiqueElements getTactiqueAccess() {
		return pTactique;
	}
	
	public ParserRule getTactiqueRule() {
		return getTactiqueAccess().getRule();
	}
	
	//Mobile:
	//	name=ID '{'
	//	'F' force=INT
	//	'V' volume=INT
	//	'NumVague' numVague=INT
	//	'In' caseEntree=[Case]
	//	'Out' caseSortie=[Case]
	//	'PVmax' quantiteEnergieMax=[Energie]
	//	'PV' quantiteEnergieCourant=[Energie]
	//	'PA' pointsAction=[Energie]
	//	'}';
	public MobileElements getMobileAccess() {
		return pMobile;
	}
	
	public ParserRule getMobileRule() {
		return getMobileAccess().getRule();
	}
	
	//Projectile:
	//	name=ID '{'
	//	'Portee' portee=INT
	//	'Masse' masse=INT
	//	'Vitesse' vitesse=INT
	//	'Position' case=[Case]
	//	'Direction' cible=[Case]
	//	'Degat' degat=[Energie]
	//	'}';
	public ProjectileElements getProjectileAccess() {
		return pProjectile;
	}
	
	public ParserRule getProjectileRule() {
		return getProjectileAccess().getRule();
	}
	
	//NatureTerrain:
	//	name=ID '{'
	//	'Volume' volume=INT
	//	'Type' type=TYPE_TERRAIN
	//	'FatigueEntree' fatigue=[Energie]
	//	'}';
	public NatureTerrainElements getNatureTerrainAccess() {
		return pNatureTerrain;
	}
	
	public ParserRule getNatureTerrainRule() {
		return getNatureTerrainAccess().getRule();
	}
	
	//enum TYPE_TERRAIN:
	//	entree | sortie | chemin | campement='camp' | decoration='deco';
	public TYPE_TERRAINElements getTYPE_TERRAINAccess() {
		return eTYPE_TERRAIN;
	}
	
	public EnumRule getTYPE_TERRAINRule() {
		return getTYPE_TERRAINAccess().getRule();
	}
	
	//Niveau:
	//	'Niveau' name=ID '{'
	//	'Difficulte' difficulte=Difficulte
	//	'DureePauses' dureePause=INT
	//	'Argent' argent=INT
	//	'MobSortisMax' mobSortisLimite=INT
	//	terrain=TerrainDeJeu
	//	'Vague' vagues+=Vague
	//	'}';
	public NiveauElements getNiveauAccess() {
		return pNiveau;
	}
	
	public ParserRule getNiveauRule() {
		return getNiveauAccess().getRule();
	}
	
	//enum Difficulte:
	//	facile | moyen | difficile;
	public DifficulteElements getDifficulteAccess() {
		return eDifficulte;
	}
	
	public EnumRule getDifficulteRule() {
		return getDifficulteAccess().getRule();
	}
	
	//TerrainDeJeu:
	//	'Terrain'
	//	damier=[Damier];
	public TerrainDeJeuElements getTerrainDeJeuAccess() {
		return pTerrainDeJeu;
	}
	
	public ParserRule getTerrainDeJeuRule() {
		return getTerrainDeJeuAccess().getRule();
	}
	
	//Damier:
	//	'Damier' name=ID '{'
	//	'Lignes' nbLignes=INT
	//	'Colonnes' nbColonnes=INT
	//	'Cases' cases+=Case*
	//	'}';
	public DamierElements getDamierAccess() {
		return pDamier;
	}
	
	public ParserRule getDamierRule() {
		return getDamierAccess().getRule();
	}
	
	//Case:
	//	'i' i=INT
	//	'j' j=INT
	//	natureTerrain=NatureTerrain;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Vague:
	//	'{'
	//	'Mobiles' mobiles+=[Mobile]*
	//	'Obstacles' obstacles+=[Obstacle]*
	//	'Gain' gainVictoire=INT
	//	'}';
	public VagueElements getVagueAccess() {
		return pVague;
	}
	
	public ParserRule getVagueRule() {
		return getVagueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
