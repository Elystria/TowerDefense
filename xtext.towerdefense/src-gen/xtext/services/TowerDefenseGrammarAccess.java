/*
 * generated by Xtext 2.12.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TowerDefenseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class JeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Jeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJeuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesPartieRuleParserRuleCall_3_0 = (RuleCall)cPartiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Jeu:
		//	'Jeu' name=ID '{'
		//	parties+=PartieRule*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Jeu' name=ID '{' parties+=PartieRule* '}'
		public Group getGroup() { return cGroup; }
		
		//'Jeu'
		public Keyword getJeuKeyword_0() { return cJeuKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parties+=PartieRule*
		public Assignment getPartiesAssignment_3() { return cPartiesAssignment_3; }
		
		//PartieRule
		public RuleCall getPartiesPartieRuleParserRuleCall_3_0() { return cPartiesPartieRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PartieRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.PartieRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartieKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesElementsPartieElementParserRuleCall_3_0 = (RuleCall)cPartiesElementsAssignment_3.eContents().get(0);
		private final Assignment cNiveauxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNiveauxNiveauParserRuleCall_4_0 = (RuleCall)cNiveauxAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PartieRule Partie:
		//	'Partie' name=ID '{'
		//	partiesElements+=PartieElement*
		//	niveaux+=Niveau*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Partie' name=ID '{' partiesElements+=PartieElement* niveaux+=Niveau* '}'
		public Group getGroup() { return cGroup; }
		
		//'Partie'
		public Keyword getPartieKeyword_0() { return cPartieKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//partiesElements+=PartieElement*
		public Assignment getPartiesElementsAssignment_3() { return cPartiesElementsAssignment_3; }
		
		//PartieElement
		public RuleCall getPartiesElementsPartieElementParserRuleCall_3_0() { return cPartiesElementsPartieElementParserRuleCall_3_0; }
		
		//niveaux+=Niveau*
		public Assignment getNiveauxAssignment_4() { return cNiveauxAssignment_4; }
		
		//Niveau
		public RuleCall getNiveauxNiveauParserRuleCall_4_0() { return cNiveauxNiveauParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PartieElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.PartieElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartieElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PartieElement:
		//	'PartieElement' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PartieElement' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PartieElement'
		public Keyword getPartieElementKeyword_0() { return cPartieElementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NiveauElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Niveau");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNiveauKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Niveau:
		//	'Niveau' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Niveau' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Niveau'
		public Keyword getNiveauKeyword_0() { return cNiveauKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final JeuElements pJeu;
	private final PartieRuleElements pPartieRule;
	private final PartieElementElements pPartieElement;
	private final NiveauElements pNiveau;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TowerDefenseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJeu = new JeuElements();
		this.pPartieRule = new PartieRuleElements();
		this.pPartieElement = new PartieElementElements();
		this.pNiveau = new NiveauElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.TowerDefense".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Jeu:
	//	'Jeu' name=ID '{'
	//	parties+=PartieRule*
	//	'}';
	public JeuElements getJeuAccess() {
		return pJeu;
	}
	
	public ParserRule getJeuRule() {
		return getJeuAccess().getRule();
	}
	
	//PartieRule Partie:
	//	'Partie' name=ID '{'
	//	partiesElements+=PartieElement*
	//	niveaux+=Niveau*
	//	'}';
	public PartieRuleElements getPartieRuleAccess() {
		return pPartieRule;
	}
	
	public ParserRule getPartieRuleRule() {
		return getPartieRuleAccess().getRule();
	}
	
	//PartieElement:
	//	'PartieElement' name=ID;
	public PartieElementElements getPartieElementAccess() {
		return pPartieElement;
	}
	
	public ParserRule getPartieElementRule() {
		return getPartieElementAccess().getRule();
	}
	
	//Niveau:
	//	'Niveau' name=ID;
	public NiveauElements getNiveauAccess() {
		return pNiveau;
	}
	
	public ParserRule getNiveauRule() {
		return getNiveauAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
