/*
 * generated by Xtext 2.12.0
 */
grammar InternalTowerDefense;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.TowerDefenseGrammarAccess;

}

@parser::members {

 	private TowerDefenseGrammarAccess grammarAccess;

    public InternalTowerDefenseParser(TokenStream input, TowerDefenseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Jeu";
   	}

   	@Override
   	protected TowerDefenseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJeu
entryRuleJeu returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJeuRule()); }
	iv_ruleJeu=ruleJeu
	{ $current=$iv_ruleJeu.current; }
	EOF;

// Rule Jeu
ruleJeu returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Jeu'
		{
			newLeafNode(otherlv_0, grammarAccess.getJeuAccess().getJeuKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJeuAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJeuRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getJeuAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJeuAccess().getPartiesPartieRuleParserRuleCall_3_0());
				}
				lv_parties_3_0=rulePartieRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJeuRule());
					}
					add(
						$current,
						"parties",
						lv_parties_3_0,
						"xtext.TowerDefense.PartieRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getJeuAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePartieRule
entryRulePartieRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPartieRuleRule()); }
	iv_rulePartieRule=rulePartieRule
	{ $current=$iv_rulePartieRule.current; }
	EOF;

// Rule PartieRule
rulePartieRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Partie'
		{
			newLeafNode(otherlv_0, grammarAccess.getPartieRuleAccess().getPartieKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPartieRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPartieRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPartieRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPartieRuleAccess().getPartiesElementsPartieElementParserRuleCall_3_0());
				}
				lv_partiesElements_3_0=rulePartieElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPartieRuleRule());
					}
					add(
						$current,
						"partiesElements",
						lv_partiesElements_3_0,
						"xtext.TowerDefense.PartieElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPartieRuleAccess().getNiveauxNiveauParserRuleCall_4_0());
				}
				lv_niveaux_4_0=ruleNiveau
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPartieRuleRule());
					}
					add(
						$current,
						"niveaux",
						lv_niveaux_4_0,
						"xtext.TowerDefense.Niveau");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPartieRuleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRulePartieElement
entryRulePartieElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPartieElementRule()); }
	iv_rulePartieElement=rulePartieElement
	{ $current=$iv_rulePartieElement.current; }
	EOF;

// Rule PartieElement
rulePartieElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PartieElement'
		{
			newLeafNode(otherlv_0, grammarAccess.getPartieElementAccess().getPartieElementKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPartieElementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPartieElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNiveau
entryRuleNiveau returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNiveauRule()); }
	iv_ruleNiveau=ruleNiveau
	{ $current=$iv_ruleNiveau.current; }
	EOF;

// Rule Niveau
ruleNiveau returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Niveau'
		{
			newLeafNode(otherlv_0, grammarAccess.getNiveauAccess().getNiveauKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNiveauAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNiveauRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
