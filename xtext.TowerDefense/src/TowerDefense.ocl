import '/plugin/xtext.TowerDefense/model/generated/TowerDefense.ecore'

package towerDefense

--JEU--
context Jeu
inv NonNullName('Le nom d\'un jeu ne peut être null'):
	name <> null
	
inv NonVide('Il doit y avoir au moins une partie'):
	self.parties->size() > 0

--PARTIE--	
context Partie
inv NonNullName('Le nom d\'une partie ne peut être null'):
	name<>null

inv NomsDifferentsPE('Les Elements d\'une partie doivent avoir un nom different'):
	self.partieElements->forAll(p1, p2 | p1<>p2 implies p1.name <> p2.name)

inv NomsDifferentsCase('Les Cases d\'une partie doivent avoir un nom different'):
	self.cases->forAll(c1, c2 | c1<>c2 implies c1.name <> c2.name)
	
inv NomsDifferentsCarte('Les Cartes d\'une partie doivent avoir un nom different'):
	self.cartes->forAll(ca1, ca2 | ca1<>ca2 implies ca1.name <> ca2.name)
	
inv NomsDifferentsNiveaux('Les Niveaux d\'une partie doivent avoir un nom different'):
	self.niveaux->forAll(n1, n2 | n1<>n2 implies n1.name <>n2.name)
	
--PARTIEELEMENT--
context PartieElement
inv NonNullName('Le nom ne peut pas être null'):
	name<>null
	
--OBSTACLE--
context Obstacle
inv caseCampement('La case doit etre un campement'):
	campement.natureDuTerrain.type = TYPE_TERRAIN::campement
	
inv EnergiePositive('Les PVMax doivent etre positifs'):
	self.quantiteEnergieMax.valeur > 0
	
inv Energiefinie('Les PV des obstacles doivent etre finis'):
	self.quantiteEnergieMax.infini = false
	
--MOBILE--
context Mobile
inv ForcePositive('la force doit etre positive'):
	self.force >= 0

inv VolumePositif('Le volume doit être strictement positif'):
	self.volume > 0

inv VaguePositive('Le numéro de Vague doit etre strictement positif'):
	self.numVague > 0

inv CaseTypeEntree('La case doit etre une entree'):
	self.caseEntree.natureDuTerrain.type = TYPE_TERRAIN::entree
	
inv CaseTypeSortie('La case doit etre une sortie'):
	self.caseSortie.natureDuTerrain.type = TYPE_TERRAIN::sortie
	
inv EnergiePositive('Les PVMax doivent etre positifs'):
	self.quantiteEnergieMax.valeur > 0

inv Energiefinie('Les PV des obstacles doivent etre finis'):
	self.quantiteEnergieMax.infini = false
	

--PROJECTILE--
context Projectile
inv PorteePositive('La portée doit etre strictement positive'):
	portee > 0

inv MassePositive('La masse doit etre positive'):
	masse >= 0
	
inv VitessePositive('La vitesse doit etre strictement positive'):
	vitesse > 0
	
inv DepartNonDeco ('Cette case est une decoration'):
	case.natureDuTerrain.type <> TYPE_TERRAIN::decoration

inv CibleNonDeco('Cette case est une decoration'):
	cible.natureDuTerrain.type <> TYPE_TERRAIN::decoration
	
inv DegatNonNul('Les degats doivent etre strictement positifs'):
	degat.valeur > 0
	
inv DegatsFinis('Les degats des projectiles doivent etre finis'):
	self.degat.infini = false
	 
	 	
--NATURETERRAIN--
context NatureTerrain
inv VolumePositif('Le Volume doit etre positif'):
	volume >= 0
	
inv FatiguePositive('La fatigue doit etre positive'):
	fatigue.valeur >= 0
	
inv Deco('Les decos ont une energie infinie'):
	if self.type = TYPE_TERRAIN::decoration or self.type = TYPE_TERRAIN::campement then fatigue.infini = true else fatigue.infini = false endif
	
--NIVEAU--
context Niveau
inv PausePositive('La durée d\'une pause doit etre strictement positive'):
	dureePause > 0
	
inv GainPositif('L\'argent doit etre positif'):
	argent >= 0
	
inv MobPositif('Le nombre de mobs qui sortent doit etre strictement positif'):
	mobSortisLimite > 0
	
inv MobSortisInfMobTotal('La somme de tous les mobiles des vagues doit etre superieur au nombre limite de sorties autorisées'):
	self.vagues.mobiles -> size() >= mobSortisLimite
	
inv NomsVaguesDifferents('Le nom des vagues d\'un niveau doit etre unique'):
	self.vagues -> forAll(v1, v2 | v1 <> v2 implies v1.name <> v2.name)
	
--CARTE--
context Carte
inv NomNonNull('Il faut un nom pour la carte'):
	name <> null
	
inv LiColPositives('Le nombre de ligne et de colonnes doit etre positif'):
	nbColonnes > 0 and nbLignes > 0
	
inv CoordonneesCasesCoherentes('Les coordonnees d\'une case ne sont pas compatible avec la taille de la carte'):
	self.cases->forAll(c | c.i <= nbLignes and c.j <= nbColonnes)
	
inv nbCasesCorrect('Il y a trop ou pas assez de case'):
	self.cases->size() = nbColonnes*nbLignes
	
inv CasesCoordonneesDifferentes1('Deux cases d\'une meme carte ne peuvent pas avoir les memes coordonnees'):
	self.cases->forAll(c1, c2 | c1 <> c2 and c1.i = c2.i implies c1.j <> c2.j)
	
inv CasesCoordonneesDifferentes2('Deux cases d\'une meme carte ne peuvent pas avoir les memes coordonnees'):
	self.cases->forAll(c1, c2 | c1 <> c2 and c1.j = c2.j implies c1.i <> c2.i)

inv CasesNonDoubles('Il ne peut pas y avoir deux fois la même case dans une carte'):
	self.cases->isUnique(name)
	
inv AuMoinsUneEntree('Il doit y avoir au moins une entree sur la carte'):
	self.cases->select( c | c.natureDuTerrain.type = TYPE_TERRAIN::entree)-> size() > 0
	
inv AuMoinsUneSortie('Il doit y avoir au moins une sortie sur la carte'):
	self.cases->select( c | c.natureDuTerrain.type = TYPE_TERRAIN::sortie)-> size() > 0
	
inv AuMoinsUnCamp('Il doit y avoir au moins un emplacement pour obstacle'):
	self.cases->select(c | c. natureDuTerrain.type = TYPE_TERRAIN::campement)-> size() > 0
	
--CASE--
context Case
inv NomNonNull('Le nom d\'une case ne peut être null'):
	name<>null
			
inv CoordonnesValides('Les coordonnees doivent etre positives'):
	i > 0 and j > 0
	
--VAGUE--
context Vague
inv NomNonNull('Le nom d\'une vague ne peut être null'):
	name<>null

inv NbMobilesPositif('Le nombre de mobiles doit être positif'):
	self.mobiles -> size() > 0
	
inv GainPositif('Le gain doit etre positif'):
	self.gainVictoire >= 0


endpackage
