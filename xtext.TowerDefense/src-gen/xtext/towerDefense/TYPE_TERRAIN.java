/**
 * generated by Xtext 2.12.0
 */
package xtext.towerDefense;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>TYPE TERRAIN</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see xtext.towerDefense.TowerDefensePackage#getTYPE_TERRAIN()
 * @model
 * @generated
 */
public enum TYPE_TERRAIN implements Enumerator
{
  /**
   * The '<em><b>Entree</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ENTREE_VALUE
   * @generated
   * @ordered
   */
  ENTREE(0, "entree", "entree"),

  /**
   * The '<em><b>Sortie</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORTIE_VALUE
   * @generated
   * @ordered
   */
  SORTIE(1, "sortie", "sortie"),

  /**
   * The '<em><b>Chemin</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CHEMIN_VALUE
   * @generated
   * @ordered
   */
  CHEMIN(2, "chemin", "chemin"),

  /**
   * The '<em><b>Campement</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CAMPEMENT_VALUE
   * @generated
   * @ordered
   */
  CAMPEMENT(3, "campement", "camp"),

  /**
   * The '<em><b>Decoration</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECORATION_VALUE
   * @generated
   * @ordered
   */
  DECORATION(4, "decoration", "deco");

  /**
   * The '<em><b>Entree</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Entree</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ENTREE
   * @model name="entree"
   * @generated
   * @ordered
   */
  public static final int ENTREE_VALUE = 0;

  /**
   * The '<em><b>Sortie</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Sortie</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORTIE
   * @model name="sortie"
   * @generated
   * @ordered
   */
  public static final int SORTIE_VALUE = 1;

  /**
   * The '<em><b>Chemin</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Chemin</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CHEMIN
   * @model name="chemin"
   * @generated
   * @ordered
   */
  public static final int CHEMIN_VALUE = 2;

  /**
   * The '<em><b>Campement</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Campement</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CAMPEMENT
   * @model name="campement" literal="camp"
   * @generated
   * @ordered
   */
  public static final int CAMPEMENT_VALUE = 3;

  /**
   * The '<em><b>Decoration</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Decoration</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DECORATION
   * @model name="decoration" literal="deco"
   * @generated
   * @ordered
   */
  public static final int DECORATION_VALUE = 4;

  /**
   * An array of all the '<em><b>TYPE TERRAIN</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final TYPE_TERRAIN[] VALUES_ARRAY =
    new TYPE_TERRAIN[]
    {
      ENTREE,
      SORTIE,
      CHEMIN,
      CAMPEMENT,
      DECORATION,
    };

  /**
   * A public read-only list of all the '<em><b>TYPE TERRAIN</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<TYPE_TERRAIN> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>TYPE TERRAIN</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static TYPE_TERRAIN get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      TYPE_TERRAIN result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>TYPE TERRAIN</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static TYPE_TERRAIN getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      TYPE_TERRAIN result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>TYPE TERRAIN</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static TYPE_TERRAIN get(int value)
  {
    switch (value)
    {
      case ENTREE_VALUE: return ENTREE;
      case SORTIE_VALUE: return SORTIE;
      case CHEMIN_VALUE: return CHEMIN;
      case CAMPEMENT_VALUE: return CAMPEMENT;
      case DECORATION_VALUE: return DECORATION;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private TYPE_TERRAIN(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //TYPE_TERRAIN
