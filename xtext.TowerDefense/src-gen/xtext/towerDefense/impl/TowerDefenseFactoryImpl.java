/**
 * generated by Xtext 2.12.0
 */
package xtext.towerDefense.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.towerDefense.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TowerDefenseFactoryImpl extends EFactoryImpl implements TowerDefenseFactory
{
  /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public static TowerDefenseFactory init()
  {
		try {
			TowerDefenseFactory theTowerDefenseFactory = (TowerDefenseFactory)EPackage.Registry.INSTANCE.getEFactory(TowerDefensePackage.eNS_URI);
			if (theTowerDefenseFactory != null) {
				return theTowerDefenseFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new TowerDefenseFactoryImpl();
	}

  /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public TowerDefenseFactoryImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EObject create(EClass eClass)
  {
		switch (eClass.getClassifierID()) {
			case TowerDefensePackage.JEU: return createJeu();
			case TowerDefensePackage.PARTIE: return createPartie();
			case TowerDefensePackage.PARTIE_ELEMENT: return createPartieElement();
			case TowerDefensePackage.ENERGIE: return createEnergie();
			case TowerDefensePackage.OBSTACLE: return createObstacle();
			case TowerDefensePackage.MOBILE: return createMobile();
			case TowerDefensePackage.PROJECTILE: return createProjectile();
			case TowerDefensePackage.NATURE_TERRAIN: return createNatureTerrain();
			case TowerDefensePackage.NIVEAU: return createNiveau();
			case TowerDefensePackage.CARTE: return createCarte();
			case TowerDefensePackage.CASE: return createCase();
			case TowerDefensePackage.VAGUE: return createVague();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
		switch (eDataType.getClassifierID()) {
			case TowerDefensePackage.TACTIQUE_TYPE:
				return createTactiqueTypeFromString(eDataType, initialValue);
			case TowerDefensePackage.TYPE_TERRAIN:
				return createTYPE_TERRAINFromString(eDataType, initialValue);
			case TowerDefensePackage.DIFFICULTE:
				return createDifficulteFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
		switch (eDataType.getClassifierID()) {
			case TowerDefensePackage.TACTIQUE_TYPE:
				return convertTactiqueTypeToString(eDataType, instanceValue);
			case TowerDefensePackage.TYPE_TERRAIN:
				return convertTYPE_TERRAINToString(eDataType, instanceValue);
			case TowerDefensePackage.DIFFICULTE:
				return convertDifficulteToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Jeu createJeu()
  {
		JeuImpl jeu = new JeuImpl();
		return jeu;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Partie createPartie()
  {
		PartieImpl partie = new PartieImpl();
		return partie;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public PartieElement createPartieElement()
  {
		PartieElementImpl partieElement = new PartieElementImpl();
		return partieElement;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Energie createEnergie()
  {
		EnergieImpl energie = new EnergieImpl();
		return energie;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Obstacle createObstacle()
  {
		ObstacleImpl obstacle = new ObstacleImpl();
		return obstacle;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Mobile createMobile()
  {
		MobileImpl mobile = new MobileImpl();
		return mobile;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Projectile createProjectile()
  {
		ProjectileImpl projectile = new ProjectileImpl();
		return projectile;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NatureTerrain createNatureTerrain()
  {
		NatureTerrainImpl natureTerrain = new NatureTerrainImpl();
		return natureTerrain;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Niveau createNiveau()
  {
		NiveauImpl niveau = new NiveauImpl();
		return niveau;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Carte createCarte()
  {
		CarteImpl carte = new CarteImpl();
		return carte;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Case createCase()
  {
		CaseImpl case_ = new CaseImpl();
		return case_;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Vague createVague()
  {
		VagueImpl vague = new VagueImpl();
		return vague;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public TactiqueType createTactiqueTypeFromString(EDataType eDataType, String initialValue)
  {
		TactiqueType result = TactiqueType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertTactiqueTypeToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public TYPE_TERRAIN createTYPE_TERRAINFromString(EDataType eDataType, String initialValue)
  {
		TYPE_TERRAIN result = TYPE_TERRAIN.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertTYPE_TERRAINToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Difficulte createDifficulteFromString(EDataType eDataType, String initialValue)
  {
		Difficulte result = Difficulte.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertDifficulteToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public TowerDefensePackage getTowerDefensePackage()
  {
		return (TowerDefensePackage)getEPackage();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
  @Deprecated
  public static TowerDefensePackage getPackage()
  {
		return TowerDefensePackage.eINSTANCE;
	}

} //TowerDefenseFactoryImpl
