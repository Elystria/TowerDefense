/**
 * generated by Xtext 2.12.0
 */
package xtext.towerDefense.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.towerDefense.Case;
import xtext.towerDefense.Energie;
import xtext.towerDefense.Obstacle;
import xtext.towerDefense.TactiqueType;
import xtext.towerDefense.TowerDefensePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Obstacle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getCampement <em>Campement</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getQuantiteEnergieMax <em>Quantite Energie Max</em>}</li>
 *   <li>{@link xtext.towerDefense.impl.ObstacleImpl#getTactique <em>Tactique</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObstacleImpl extends PartieElementImpl implements Obstacle
{
  /**
   * The cached value of the '{@link #getCampement() <em>Campement</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCampement()
   * @generated
   * @ordered
   */
  protected Case campement;

  /**
   * The cached value of the '{@link #getQuantiteEnergieMax() <em>Quantite Energie Max</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantiteEnergieMax()
   * @generated
   * @ordered
   */
  protected Energie quantiteEnergieMax;

  /**
   * The default value of the '{@link #getTactique() <em>Tactique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTactique()
   * @generated
   * @ordered
   */
  protected static final TactiqueType TACTIQUE_EDEFAULT = TactiqueType.PROCHE;

  /**
   * The cached value of the '{@link #getTactique() <em>Tactique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTactique()
   * @generated
   * @ordered
   */
  protected TactiqueType tactique = TACTIQUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObstacleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TowerDefensePackage.Literals.OBSTACLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case getCampement()
  {
    if (campement != null && campement.eIsProxy())
    {
      InternalEObject oldCampement = (InternalEObject)campement;
      campement = (Case)eResolveProxy(oldCampement);
      if (campement != oldCampement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__CAMPEMENT, oldCampement, campement));
      }
    }
    return campement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case basicGetCampement()
  {
    return campement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCampement(Case newCampement)
  {
    Case oldCampement = campement;
    campement = newCampement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__CAMPEMENT, oldCampement, campement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie getQuantiteEnergieMax()
  {
    if (quantiteEnergieMax != null && quantiteEnergieMax.eIsProxy())
    {
      InternalEObject oldQuantiteEnergieMax = (InternalEObject)quantiteEnergieMax;
      quantiteEnergieMax = (Energie)eResolveProxy(oldQuantiteEnergieMax);
      if (quantiteEnergieMax != oldQuantiteEnergieMax)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX, oldQuantiteEnergieMax, quantiteEnergieMax));
      }
    }
    return quantiteEnergieMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Energie basicGetQuantiteEnergieMax()
  {
    return quantiteEnergieMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQuantiteEnergieMax(Energie newQuantiteEnergieMax)
  {
    Energie oldQuantiteEnergieMax = quantiteEnergieMax;
    quantiteEnergieMax = newQuantiteEnergieMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX, oldQuantiteEnergieMax, quantiteEnergieMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TactiqueType getTactique()
  {
    return tactique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTactique(TactiqueType newTactique)
  {
    TactiqueType oldTactique = tactique;
    tactique = newTactique == null ? TACTIQUE_EDEFAULT : newTactique;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TowerDefensePackage.OBSTACLE__TACTIQUE, oldTactique, tactique));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        if (resolve) return getCampement();
        return basicGetCampement();
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        if (resolve) return getQuantiteEnergieMax();
        return basicGetQuantiteEnergieMax();
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        return getTactique();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        setCampement((Case)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        setQuantiteEnergieMax((Energie)newValue);
        return;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        setTactique((TactiqueType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        setCampement((Case)null);
        return;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        setQuantiteEnergieMax((Energie)null);
        return;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        setTactique(TACTIQUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TowerDefensePackage.OBSTACLE__CAMPEMENT:
        return campement != null;
      case TowerDefensePackage.OBSTACLE__QUANTITE_ENERGIE_MAX:
        return quantiteEnergieMax != null;
      case TowerDefensePackage.OBSTACLE__TACTIQUE:
        return tactique != TACTIQUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (tactique: ");
    result.append(tactique);
    result.append(')');
    return result.toString();
  }

} //ObstacleImpl
