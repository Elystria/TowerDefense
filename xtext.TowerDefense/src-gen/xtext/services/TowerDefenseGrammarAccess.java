/*
 * generated by Xtext 2.12.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TowerDefenseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class JeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Jeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJeuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartiesPartieParserRuleCall_3_0 = (RuleCall)cPartiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////les projectiles ne sont pas rattachés a d autres éléments :(
		//Jeu:
		//	'Jeu' name=ID '{'
		//	parties+=Partie*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Jeu' name=ID '{' parties+=Partie* '}'
		public Group getGroup() { return cGroup; }
		
		//'Jeu'
		public Keyword getJeuKeyword_0() { return cJeuKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parties+=Partie*
		public Assignment getPartiesAssignment_3() { return cPartiesAssignment_3; }
		
		//Partie
		public RuleCall getPartiesPartieParserRuleCall_3_0() { return cPartiesPartieParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PartieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Partie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartieKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesCaseParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Assignment cCartesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCartesCarteParserRuleCall_4_0 = (RuleCall)cCartesAssignment_4.eContents().get(0);
		private final Assignment cPartieElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPartieElementsPartieElementParserRuleCall_5_0 = (RuleCall)cPartieElementsAssignment_5.eContents().get(0);
		private final Assignment cNiveauxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNiveauxNiveauParserRuleCall_6_0 = (RuleCall)cNiveauxAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Partie:
		//	'Partie' name=ID '{'
		//	//natures+=NatureTerrain*
		//	cases+=Case*
		//	cartes+=Carte*
		//	partieElements+=PartieElement*
		//	niveaux+=Niveau*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Partie' name=ID '{' //natures+=NatureTerrain*
		//cases+=Case* cartes+=Carte* partieElements+=PartieElement* niveaux+=Niveau* '}'
		public Group getGroup() { return cGroup; }
		
		//'Partie'
		public Keyword getPartieKeyword_0() { return cPartieKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////natures+=NatureTerrain*
		//cases+=Case*
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_3_0() { return cCasesCaseParserRuleCall_3_0; }
		
		//cartes+=Carte*
		public Assignment getCartesAssignment_4() { return cCartesAssignment_4; }
		
		//Carte
		public RuleCall getCartesCarteParserRuleCall_4_0() { return cCartesCarteParserRuleCall_4_0; }
		
		//partieElements+=PartieElement*
		public Assignment getPartieElementsAssignment_5() { return cPartieElementsAssignment_5; }
		
		//PartieElement
		public RuleCall getPartieElementsPartieElementParserRuleCall_5_0() { return cPartieElementsPartieElementParserRuleCall_5_0; }
		
		//niveaux+=Niveau*
		public Assignment getNiveauxAssignment_6() { return cNiveauxAssignment_6; }
		
		//Niveau
		public RuleCall getNiveauxNiveauParserRuleCall_6_0() { return cNiveauxNiveauParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PartieElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.PartieElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObstacleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMobileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNatureTerrainParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PartieElement:
		//	Obstacle | Mobile | Projectile | NatureTerrain;
		@Override public ParserRule getRule() { return rule; }
		
		//Obstacle | Mobile | Projectile | NatureTerrain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Obstacle
		public RuleCall getObstacleParserRuleCall_0() { return cObstacleParserRuleCall_0; }
		
		//Mobile
		public RuleCall getMobileParserRuleCall_1() { return cMobileParserRuleCall_1; }
		
		//Projectile
		public RuleCall getProjectileParserRuleCall_2() { return cProjectileParserRuleCall_2; }
		
		//NatureTerrain
		public RuleCall getNatureTerrainParserRuleCall_3() { return cNatureTerrainParserRuleCall_3; }
	}
	public class EnergieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Energie");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInfiniAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cInfiniInfiniKeyword_0_0 = (Keyword)cInfiniAssignment_0.eContents().get(0);
		private final Assignment cValeurAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValeurINTTerminalRuleCall_1_0 = (RuleCall)cValeurAssignment_1.eContents().get(0);
		
		//Energie:
		//	infini?='infini' | valeur=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//infini?='infini' | valeur=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//infini?='infini'
		public Assignment getInfiniAssignment_0() { return cInfiniAssignment_0; }
		
		//'infini'
		public Keyword getInfiniInfiniKeyword_0_0() { return cInfiniInfiniKeyword_0_0; }
		
		//valeur=INT
		public Assignment getValeurAssignment_1() { return cValeurAssignment_1; }
		
		//INT
		public RuleCall getValeurINTTerminalRuleCall_1_0() { return cValeurINTTerminalRuleCall_1_0; }
	}
	public class ObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Obstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObstacleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCampementKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCampementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCampementCaseCrossReference_4_0 = (CrossReference)cCampementAssignment_4.eContents().get(0);
		private final RuleCall cCampementCaseIDTerminalRuleCall_4_0_1 = (RuleCall)cCampementCaseCrossReference_4_0.eContents().get(1);
		private final Keyword cPVmaxKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQuantiteEnergieMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuantiteEnergieMaxEnergieParserRuleCall_6_0 = (RuleCall)cQuantiteEnergieMaxAssignment_6.eContents().get(0);
		private final Keyword cTactiqueKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTactiqueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTactiqueTactiqueTypeEnumRuleCall_8_0 = (RuleCall)cTactiqueAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Obstacle:
		//	'Obstacle' name=ID '{'
		//	'Campement' campement=[Case]
		//	'PVmax' quantiteEnergieMax=Energie
		//	'Tactique' tactique=TactiqueType
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Obstacle' name=ID '{' 'Campement' campement=[Case] 'PVmax' quantiteEnergieMax=Energie 'Tactique' tactique=TactiqueType
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Obstacle'
		public Keyword getObstacleKeyword_0() { return cObstacleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Campement'
		public Keyword getCampementKeyword_3() { return cCampementKeyword_3; }
		
		//campement=[Case]
		public Assignment getCampementAssignment_4() { return cCampementAssignment_4; }
		
		//[Case]
		public CrossReference getCampementCaseCrossReference_4_0() { return cCampementCaseCrossReference_4_0; }
		
		//ID
		public RuleCall getCampementCaseIDTerminalRuleCall_4_0_1() { return cCampementCaseIDTerminalRuleCall_4_0_1; }
		
		//'PVmax'
		public Keyword getPVmaxKeyword_5() { return cPVmaxKeyword_5; }
		
		//quantiteEnergieMax=Energie
		public Assignment getQuantiteEnergieMaxAssignment_6() { return cQuantiteEnergieMaxAssignment_6; }
		
		//Energie
		public RuleCall getQuantiteEnergieMaxEnergieParserRuleCall_6_0() { return cQuantiteEnergieMaxEnergieParserRuleCall_6_0; }
		
		//'Tactique'
		public Keyword getTactiqueKeyword_7() { return cTactiqueKeyword_7; }
		
		//tactique=TactiqueType
		public Assignment getTactiqueAssignment_8() { return cTactiqueAssignment_8; }
		
		//TactiqueType
		public RuleCall getTactiqueTactiqueTypeEnumRuleCall_8_0() { return cTactiqueTactiqueTypeEnumRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MobileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Mobile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMobileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForceINTTerminalRuleCall_4_0 = (RuleCall)cForceAssignment_4.eContents().get(0);
		private final Keyword cVKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVolumeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVolumeINTTerminalRuleCall_6_0 = (RuleCall)cVolumeAssignment_6.eContents().get(0);
		private final Keyword cNumVagueKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNumVagueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNumVagueINTTerminalRuleCall_8_0 = (RuleCall)cNumVagueAssignment_8.eContents().get(0);
		private final Keyword cInKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCaseEntreeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cCaseEntreeCaseCrossReference_10_0 = (CrossReference)cCaseEntreeAssignment_10.eContents().get(0);
		private final RuleCall cCaseEntreeCaseIDTerminalRuleCall_10_0_1 = (RuleCall)cCaseEntreeCaseCrossReference_10_0.eContents().get(1);
		private final Keyword cOutKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCaseSortieAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cCaseSortieCaseCrossReference_12_0 = (CrossReference)cCaseSortieAssignment_12.eContents().get(0);
		private final RuleCall cCaseSortieCaseIDTerminalRuleCall_12_0_1 = (RuleCall)cCaseSortieCaseCrossReference_12_0.eContents().get(1);
		private final Keyword cPVmaxKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cQuantiteEnergieMaxAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cQuantiteEnergieMaxEnergieParserRuleCall_14_0 = (RuleCall)cQuantiteEnergieMaxAssignment_14.eContents().get(0);
		private final Keyword cTactiqueKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cTactiqueAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cTactiqueTactiqueTypeEnumRuleCall_16_0 = (RuleCall)cTactiqueAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//Mobile:
		//	'Mobile' name=ID '{'
		//	'F' force=INT
		//	'V' volume=INT
		//	'NumVague' numVague=INT
		//	'In' caseEntree=[Case]
		//	'Out' caseSortie=[Case]
		//	'PVmax' quantiteEnergieMax=Energie
		//	'Tactique' tactique=TactiqueType
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mobile' name=ID '{' 'F' force=INT 'V' volume=INT 'NumVague' numVague=INT 'In' caseEntree=[Case] 'Out' caseSortie=[Case]
		//'PVmax' quantiteEnergieMax=Energie 'Tactique' tactique=TactiqueType '}'
		public Group getGroup() { return cGroup; }
		
		//'Mobile'
		public Keyword getMobileKeyword_0() { return cMobileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'F'
		public Keyword getFKeyword_3() { return cFKeyword_3; }
		
		//force=INT
		public Assignment getForceAssignment_4() { return cForceAssignment_4; }
		
		//INT
		public RuleCall getForceINTTerminalRuleCall_4_0() { return cForceINTTerminalRuleCall_4_0; }
		
		//'V'
		public Keyword getVKeyword_5() { return cVKeyword_5; }
		
		//volume=INT
		public Assignment getVolumeAssignment_6() { return cVolumeAssignment_6; }
		
		//INT
		public RuleCall getVolumeINTTerminalRuleCall_6_0() { return cVolumeINTTerminalRuleCall_6_0; }
		
		//'NumVague'
		public Keyword getNumVagueKeyword_7() { return cNumVagueKeyword_7; }
		
		//numVague=INT
		public Assignment getNumVagueAssignment_8() { return cNumVagueAssignment_8; }
		
		//INT
		public RuleCall getNumVagueINTTerminalRuleCall_8_0() { return cNumVagueINTTerminalRuleCall_8_0; }
		
		//'In'
		public Keyword getInKeyword_9() { return cInKeyword_9; }
		
		//caseEntree=[Case]
		public Assignment getCaseEntreeAssignment_10() { return cCaseEntreeAssignment_10; }
		
		//[Case]
		public CrossReference getCaseEntreeCaseCrossReference_10_0() { return cCaseEntreeCaseCrossReference_10_0; }
		
		//ID
		public RuleCall getCaseEntreeCaseIDTerminalRuleCall_10_0_1() { return cCaseEntreeCaseIDTerminalRuleCall_10_0_1; }
		
		//'Out'
		public Keyword getOutKeyword_11() { return cOutKeyword_11; }
		
		//caseSortie=[Case]
		public Assignment getCaseSortieAssignment_12() { return cCaseSortieAssignment_12; }
		
		//[Case]
		public CrossReference getCaseSortieCaseCrossReference_12_0() { return cCaseSortieCaseCrossReference_12_0; }
		
		//ID
		public RuleCall getCaseSortieCaseIDTerminalRuleCall_12_0_1() { return cCaseSortieCaseIDTerminalRuleCall_12_0_1; }
		
		//'PVmax'
		public Keyword getPVmaxKeyword_13() { return cPVmaxKeyword_13; }
		
		//quantiteEnergieMax=Energie
		public Assignment getQuantiteEnergieMaxAssignment_14() { return cQuantiteEnergieMaxAssignment_14; }
		
		//Energie
		public RuleCall getQuantiteEnergieMaxEnergieParserRuleCall_14_0() { return cQuantiteEnergieMaxEnergieParserRuleCall_14_0; }
		
		//'Tactique'
		public Keyword getTactiqueKeyword_15() { return cTactiqueKeyword_15; }
		
		//tactique=TactiqueType
		public Assignment getTactiqueAssignment_16() { return cTactiqueAssignment_16; }
		
		//TactiqueType
		public RuleCall getTactiqueTactiqueTypeEnumRuleCall_16_0() { return cTactiqueTactiqueTypeEnumRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class ProjectileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Projectile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPorteeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPorteeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPorteeINTTerminalRuleCall_4_0 = (RuleCall)cPorteeAssignment_4.eContents().get(0);
		private final Keyword cMasseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMasseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMasseINTTerminalRuleCall_6_0 = (RuleCall)cMasseAssignment_6.eContents().get(0);
		private final Keyword cVitesseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVitesseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVitesseINTTerminalRuleCall_8_0 = (RuleCall)cVitesseAssignment_8.eContents().get(0);
		private final Keyword cPositionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCaseAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cCaseCaseCrossReference_10_0 = (CrossReference)cCaseAssignment_10.eContents().get(0);
		private final RuleCall cCaseCaseIDTerminalRuleCall_10_0_1 = (RuleCall)cCaseCaseCrossReference_10_0.eContents().get(1);
		private final Keyword cDirectionKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCibleAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cCibleCaseCrossReference_12_0 = (CrossReference)cCibleAssignment_12.eContents().get(0);
		private final RuleCall cCibleCaseIDTerminalRuleCall_12_0_1 = (RuleCall)cCibleCaseCrossReference_12_0.eContents().get(1);
		private final Keyword cDegatKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cDegatAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDegatEnergieParserRuleCall_14_0 = (RuleCall)cDegatAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Projectile:
		//	'Projectile' name=ID '{'
		//	'Portee' portee=INT
		//	'Masse' masse=INT
		//	'Vitesse' vitesse=INT
		//	'Position' case=[Case]
		//	'Direction' cible=[Case]
		//	'Degat' degat=Energie
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Projectile' name=ID '{' 'Portee' portee=INT 'Masse' masse=INT 'Vitesse' vitesse=INT 'Position' case=[Case] 'Direction'
		//cible=[Case] 'Degat' degat=Energie '}'
		public Group getGroup() { return cGroup; }
		
		//'Projectile'
		public Keyword getProjectileKeyword_0() { return cProjectileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Portee'
		public Keyword getPorteeKeyword_3() { return cPorteeKeyword_3; }
		
		//portee=INT
		public Assignment getPorteeAssignment_4() { return cPorteeAssignment_4; }
		
		//INT
		public RuleCall getPorteeINTTerminalRuleCall_4_0() { return cPorteeINTTerminalRuleCall_4_0; }
		
		//'Masse'
		public Keyword getMasseKeyword_5() { return cMasseKeyword_5; }
		
		//masse=INT
		public Assignment getMasseAssignment_6() { return cMasseAssignment_6; }
		
		//INT
		public RuleCall getMasseINTTerminalRuleCall_6_0() { return cMasseINTTerminalRuleCall_6_0; }
		
		//'Vitesse'
		public Keyword getVitesseKeyword_7() { return cVitesseKeyword_7; }
		
		//vitesse=INT
		public Assignment getVitesseAssignment_8() { return cVitesseAssignment_8; }
		
		//INT
		public RuleCall getVitesseINTTerminalRuleCall_8_0() { return cVitesseINTTerminalRuleCall_8_0; }
		
		//'Position'
		public Keyword getPositionKeyword_9() { return cPositionKeyword_9; }
		
		//case=[Case]
		public Assignment getCaseAssignment_10() { return cCaseAssignment_10; }
		
		//[Case]
		public CrossReference getCaseCaseCrossReference_10_0() { return cCaseCaseCrossReference_10_0; }
		
		//ID
		public RuleCall getCaseCaseIDTerminalRuleCall_10_0_1() { return cCaseCaseIDTerminalRuleCall_10_0_1; }
		
		//'Direction'
		public Keyword getDirectionKeyword_11() { return cDirectionKeyword_11; }
		
		//cible=[Case]
		public Assignment getCibleAssignment_12() { return cCibleAssignment_12; }
		
		//[Case]
		public CrossReference getCibleCaseCrossReference_12_0() { return cCibleCaseCrossReference_12_0; }
		
		//ID
		public RuleCall getCibleCaseIDTerminalRuleCall_12_0_1() { return cCibleCaseIDTerminalRuleCall_12_0_1; }
		
		//'Degat'
		public Keyword getDegatKeyword_13() { return cDegatKeyword_13; }
		
		//degat=Energie
		public Assignment getDegatAssignment_14() { return cDegatAssignment_14; }
		
		//Energie
		public RuleCall getDegatEnergieParserRuleCall_14_0() { return cDegatEnergieParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class NatureTerrainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.NatureTerrain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNatureTerrainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVolumeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVolumeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVolumeINTTerminalRuleCall_4_0 = (RuleCall)cVolumeAssignment_4.eContents().get(0);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTYPE_TERRAINEnumRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cFatigueEntreeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFatigueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFatigueEnergieParserRuleCall_8_0 = (RuleCall)cFatigueAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//NatureTerrain:
		//	'NatureTerrain' name=ID '{'
		//	'Volume' volume=INT
		//	'Type' type=TYPE_TERRAIN
		//	'FatigueEntree' fatigue=Energie
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NatureTerrain' name=ID '{' 'Volume' volume=INT 'Type' type=TYPE_TERRAIN 'FatigueEntree' fatigue=Energie '}'
		public Group getGroup() { return cGroup; }
		
		//'NatureTerrain'
		public Keyword getNatureTerrainKeyword_0() { return cNatureTerrainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Volume'
		public Keyword getVolumeKeyword_3() { return cVolumeKeyword_3; }
		
		//volume=INT
		public Assignment getVolumeAssignment_4() { return cVolumeAssignment_4; }
		
		//INT
		public RuleCall getVolumeINTTerminalRuleCall_4_0() { return cVolumeINTTerminalRuleCall_4_0; }
		
		//'Type'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//type=TYPE_TERRAIN
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//TYPE_TERRAIN
		public RuleCall getTypeTYPE_TERRAINEnumRuleCall_6_0() { return cTypeTYPE_TERRAINEnumRuleCall_6_0; }
		
		//'FatigueEntree'
		public Keyword getFatigueEntreeKeyword_7() { return cFatigueEntreeKeyword_7; }
		
		//fatigue=Energie
		public Assignment getFatigueAssignment_8() { return cFatigueAssignment_8; }
		
		//Energie
		public RuleCall getFatigueEnergieParserRuleCall_8_0() { return cFatigueEnergieParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class NiveauElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Niveau");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNiveauKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDifficulteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDifficulteDifficulteEnumRuleCall_2_0 = (RuleCall)cDifficulteAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDureePausesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDureePauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDureePauseINTTerminalRuleCall_5_0 = (RuleCall)cDureePauseAssignment_5.eContents().get(0);
		private final Keyword cArgentKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArgentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArgentINTTerminalRuleCall_7_0 = (RuleCall)cArgentAssignment_7.eContents().get(0);
		private final Keyword cMobSortisMaxKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMobSortisLimiteAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMobSortisLimiteINTTerminalRuleCall_9_0 = (RuleCall)cMobSortisLimiteAssignment_9.eContents().get(0);
		private final Keyword cCarteKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cCarteAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cCarteCarteCrossReference_11_0 = (CrossReference)cCarteAssignment_11.eContents().get(0);
		private final RuleCall cCarteCarteIDTerminalRuleCall_11_0_1 = (RuleCall)cCarteCarteCrossReference_11_0.eContents().get(1);
		private final Assignment cVaguesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cVaguesVagueParserRuleCall_12_0 = (RuleCall)cVaguesAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Niveau:
		//	'Niveau' name=ID difficulte=Difficulte '{'
		//	'DureePauses' dureePause=INT
		//	'Argent' argent=INT
		//	'MobSortisMax' mobSortisLimite=INT
		//	'Carte' carte=[Carte] vagues+=Vague*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Niveau' name=ID difficulte=Difficulte '{' 'DureePauses' dureePause=INT 'Argent' argent=INT 'MobSortisMax'
		//mobSortisLimite=INT 'Carte' carte=[Carte] vagues+=Vague* '}'
		public Group getGroup() { return cGroup; }
		
		//'Niveau'
		public Keyword getNiveauKeyword_0() { return cNiveauKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//difficulte=Difficulte
		public Assignment getDifficulteAssignment_2() { return cDifficulteAssignment_2; }
		
		//Difficulte
		public RuleCall getDifficulteDifficulteEnumRuleCall_2_0() { return cDifficulteDifficulteEnumRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'DureePauses'
		public Keyword getDureePausesKeyword_4() { return cDureePausesKeyword_4; }
		
		//dureePause=INT
		public Assignment getDureePauseAssignment_5() { return cDureePauseAssignment_5; }
		
		//INT
		public RuleCall getDureePauseINTTerminalRuleCall_5_0() { return cDureePauseINTTerminalRuleCall_5_0; }
		
		//'Argent'
		public Keyword getArgentKeyword_6() { return cArgentKeyword_6; }
		
		//argent=INT
		public Assignment getArgentAssignment_7() { return cArgentAssignment_7; }
		
		//INT
		public RuleCall getArgentINTTerminalRuleCall_7_0() { return cArgentINTTerminalRuleCall_7_0; }
		
		//'MobSortisMax'
		public Keyword getMobSortisMaxKeyword_8() { return cMobSortisMaxKeyword_8; }
		
		//mobSortisLimite=INT
		public Assignment getMobSortisLimiteAssignment_9() { return cMobSortisLimiteAssignment_9; }
		
		//INT
		public RuleCall getMobSortisLimiteINTTerminalRuleCall_9_0() { return cMobSortisLimiteINTTerminalRuleCall_9_0; }
		
		//'Carte'
		public Keyword getCarteKeyword_10() { return cCarteKeyword_10; }
		
		//carte=[Carte]
		public Assignment getCarteAssignment_11() { return cCarteAssignment_11; }
		
		//[Carte]
		public CrossReference getCarteCarteCrossReference_11_0() { return cCarteCarteCrossReference_11_0; }
		
		//ID
		public RuleCall getCarteCarteIDTerminalRuleCall_11_0_1() { return cCarteCarteIDTerminalRuleCall_11_0_1; }
		
		//vagues+=Vague*
		public Assignment getVaguesAssignment_12() { return cVaguesAssignment_12; }
		
		//Vague
		public RuleCall getVaguesVagueParserRuleCall_12_0() { return cVaguesVagueParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class CarteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Carte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCarteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLignesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNbLignesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNbLignesINTTerminalRuleCall_4_0 = (RuleCall)cNbLignesAssignment_4.eContents().get(0);
		private final Keyword cColonnesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNbColonnesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNbColonnesINTTerminalRuleCall_6_0 = (RuleCall)cNbColonnesAssignment_6.eContents().get(0);
		private final Keyword cCasesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCasesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cCasesCaseCrossReference_8_0 = (CrossReference)cCasesAssignment_8.eContents().get(0);
		private final RuleCall cCasesCaseIDTerminalRuleCall_8_0_1 = (RuleCall)cCasesCaseCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Carte:
		//	'Carte' name=ID '{'
		//	'Lignes' nbLignes=INT
		//	'Colonnes' nbColonnes=INT
		//	'Cases' cases+=[Case]*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Carte' name=ID '{' 'Lignes' nbLignes=INT 'Colonnes' nbColonnes=INT 'Cases' cases+=[Case]* '}'
		public Group getGroup() { return cGroup; }
		
		//'Carte'
		public Keyword getCarteKeyword_0() { return cCarteKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Lignes'
		public Keyword getLignesKeyword_3() { return cLignesKeyword_3; }
		
		//nbLignes=INT
		public Assignment getNbLignesAssignment_4() { return cNbLignesAssignment_4; }
		
		//INT
		public RuleCall getNbLignesINTTerminalRuleCall_4_0() { return cNbLignesINTTerminalRuleCall_4_0; }
		
		//'Colonnes'
		public Keyword getColonnesKeyword_5() { return cColonnesKeyword_5; }
		
		//nbColonnes=INT
		public Assignment getNbColonnesAssignment_6() { return cNbColonnesAssignment_6; }
		
		//INT
		public RuleCall getNbColonnesINTTerminalRuleCall_6_0() { return cNbColonnesINTTerminalRuleCall_6_0; }
		
		//'Cases'
		public Keyword getCasesKeyword_7() { return cCasesKeyword_7; }
		
		//cases+=[Case]*
		public Assignment getCasesAssignment_8() { return cCasesAssignment_8; }
		
		//[Case]
		public CrossReference getCasesCaseCrossReference_8_0() { return cCasesCaseCrossReference_8_0; }
		
		//ID
		public RuleCall getCasesCaseIDTerminalRuleCall_8_0_1() { return cCasesCaseIDTerminalRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIINTTerminalRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		private final Assignment cJAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJINTTerminalRuleCall_2_0 = (RuleCall)cJAssignment_2.eContents().get(0);
		private final Assignment cNatureDuTerrainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNatureDuTerrainNatureTerrainCrossReference_3_0 = (CrossReference)cNatureDuTerrainAssignment_3.eContents().get(0);
		private final RuleCall cNatureDuTerrainNatureTerrainIDTerminalRuleCall_3_0_1 = (RuleCall)cNatureDuTerrainNatureTerrainCrossReference_3_0.eContents().get(1);
		
		//Case:
		//	name=ID
		//	i=INT
		//	j=INT
		//	natureDuTerrain=[NatureTerrain];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID i=INT j=INT natureDuTerrain=[NatureTerrain]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//i=INT
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//INT
		public RuleCall getIINTTerminalRuleCall_1_0() { return cIINTTerminalRuleCall_1_0; }
		
		//j=INT
		public Assignment getJAssignment_2() { return cJAssignment_2; }
		
		//INT
		public RuleCall getJINTTerminalRuleCall_2_0() { return cJINTTerminalRuleCall_2_0; }
		
		//natureDuTerrain=[NatureTerrain]
		public Assignment getNatureDuTerrainAssignment_3() { return cNatureDuTerrainAssignment_3; }
		
		//[NatureTerrain]
		public CrossReference getNatureDuTerrainNatureTerrainCrossReference_3_0() { return cNatureDuTerrainNatureTerrainCrossReference_3_0; }
		
		//ID
		public RuleCall getNatureDuTerrainNatureTerrainIDTerminalRuleCall_3_0_1() { return cNatureDuTerrainNatureTerrainIDTerminalRuleCall_3_0_1; }
	}
	public class VagueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Vague");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVagueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMobilesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMobilesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMobilesMobileCrossReference_4_0 = (CrossReference)cMobilesAssignment_4.eContents().get(0);
		private final RuleCall cMobilesMobileIDTerminalRuleCall_4_0_1 = (RuleCall)cMobilesMobileCrossReference_4_0.eContents().get(1);
		private final Keyword cObstaclesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObstaclesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cObstaclesObstacleCrossReference_6_0 = (CrossReference)cObstaclesAssignment_6.eContents().get(0);
		private final RuleCall cObstaclesObstacleIDTerminalRuleCall_6_0_1 = (RuleCall)cObstaclesObstacleCrossReference_6_0.eContents().get(1);
		private final Keyword cGainKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGainVictoireAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGainVictoireINTTerminalRuleCall_8_0 = (RuleCall)cGainVictoireAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Vague:
		//	'Vague' name=ID // j'ai rajoute un nom aux vagues
		//	'{'
		//	'Mobiles' mobiles+=[Mobile]*
		//	'Obstacles' obstacles+=[Obstacle]*
		//	'Gain' gainVictoire=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Vague' name=ID // j'ai rajoute un nom aux vagues
		//'{' 'Mobiles' mobiles+=[Mobile]* 'Obstacles' obstacles+=[Obstacle]* 'Gain' gainVictoire=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'Vague'
		public Keyword getVagueKeyword_0() { return cVagueKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//// j'ai rajoute un nom aux vagues
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Mobiles'
		public Keyword getMobilesKeyword_3() { return cMobilesKeyword_3; }
		
		//mobiles+=[Mobile]*
		public Assignment getMobilesAssignment_4() { return cMobilesAssignment_4; }
		
		//[Mobile]
		public CrossReference getMobilesMobileCrossReference_4_0() { return cMobilesMobileCrossReference_4_0; }
		
		//ID
		public RuleCall getMobilesMobileIDTerminalRuleCall_4_0_1() { return cMobilesMobileIDTerminalRuleCall_4_0_1; }
		
		//'Obstacles'
		public Keyword getObstaclesKeyword_5() { return cObstaclesKeyword_5; }
		
		//obstacles+=[Obstacle]*
		public Assignment getObstaclesAssignment_6() { return cObstaclesAssignment_6; }
		
		//[Obstacle]
		public CrossReference getObstaclesObstacleCrossReference_6_0() { return cObstaclesObstacleCrossReference_6_0; }
		
		//ID
		public RuleCall getObstaclesObstacleIDTerminalRuleCall_6_0_1() { return cObstaclesObstacleIDTerminalRuleCall_6_0_1; }
		
		//'Gain'
		public Keyword getGainKeyword_7() { return cGainKeyword_7; }
		
		//gainVictoire=INT
		public Assignment getGainVictoireAssignment_8() { return cGainVictoireAssignment_8; }
		
		//INT
		public RuleCall getGainVictoireINTTerminalRuleCall_8_0() { return cGainVictoireINTTerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	public class TactiqueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.TactiqueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProcheEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProcheProcheFirstKeyword_0_0 = (Keyword)cProcheEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFaibleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFaibleFaibleFirstKeyword_1_0 = (Keyword)cFaibleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFortEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFortFortFirstKeyword_2_0 = (Keyword)cFortEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TactiqueType:
		//	proche='procheFirst' | faible='faibleFirst' | fort='fortFirst';
		public EnumRule getRule() { return rule; }
		
		//proche='procheFirst' | faible='faibleFirst' | fort='fortFirst'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//proche='procheFirst'
		public EnumLiteralDeclaration getProcheEnumLiteralDeclaration_0() { return cProcheEnumLiteralDeclaration_0; }
		
		//'procheFirst'
		public Keyword getProcheProcheFirstKeyword_0_0() { return cProcheProcheFirstKeyword_0_0; }
		
		//faible='faibleFirst'
		public EnumLiteralDeclaration getFaibleEnumLiteralDeclaration_1() { return cFaibleEnumLiteralDeclaration_1; }
		
		//'faibleFirst'
		public Keyword getFaibleFaibleFirstKeyword_1_0() { return cFaibleFaibleFirstKeyword_1_0; }
		
		//fort='fortFirst'
		public EnumLiteralDeclaration getFortEnumLiteralDeclaration_2() { return cFortEnumLiteralDeclaration_2; }
		
		//'fortFirst'
		public Keyword getFortFortFirstKeyword_2_0() { return cFortFortFirstKeyword_2_0; }
	}
	public class TYPE_TERRAINElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.TYPE_TERRAIN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEntreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEntreeEntreeKeyword_0_0 = (Keyword)cEntreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSortieEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSortieSortieKeyword_1_0 = (Keyword)cSortieEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCheminEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCheminCheminKeyword_2_0 = (Keyword)cCheminEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCampementEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCampementCampKeyword_3_0 = (Keyword)cCampementEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDecorationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDecorationDecoKeyword_4_0 = (Keyword)cDecorationEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TYPE_TERRAIN:
		//	entree | sortie | chemin | campement='camp' | decoration='deco';
		public EnumRule getRule() { return rule; }
		
		//entree | sortie | chemin | campement='camp' | decoration='deco'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entree
		public EnumLiteralDeclaration getEntreeEnumLiteralDeclaration_0() { return cEntreeEnumLiteralDeclaration_0; }
		
		//'entree'
		public Keyword getEntreeEntreeKeyword_0_0() { return cEntreeEntreeKeyword_0_0; }
		
		//sortie
		public EnumLiteralDeclaration getSortieEnumLiteralDeclaration_1() { return cSortieEnumLiteralDeclaration_1; }
		
		//'sortie'
		public Keyword getSortieSortieKeyword_1_0() { return cSortieSortieKeyword_1_0; }
		
		//chemin
		public EnumLiteralDeclaration getCheminEnumLiteralDeclaration_2() { return cCheminEnumLiteralDeclaration_2; }
		
		//'chemin'
		public Keyword getCheminCheminKeyword_2_0() { return cCheminCheminKeyword_2_0; }
		
		//campement='camp'
		public EnumLiteralDeclaration getCampementEnumLiteralDeclaration_3() { return cCampementEnumLiteralDeclaration_3; }
		
		//'camp'
		public Keyword getCampementCampKeyword_3_0() { return cCampementCampKeyword_3_0; }
		
		//decoration='deco'
		public EnumLiteralDeclaration getDecorationEnumLiteralDeclaration_4() { return cDecorationEnumLiteralDeclaration_4; }
		
		//'deco'
		public Keyword getDecorationDecoKeyword_4_0() { return cDecorationDecoKeyword_4_0; }
	}
	public class DifficulteElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.TowerDefense.Difficulte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFacileEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFacileFacileKeyword_0_0 = (Keyword)cFacileEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMoyenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMoyenMoyenKeyword_1_0 = (Keyword)cMoyenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDifficileEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDifficileDifficileKeyword_2_0 = (Keyword)cDifficileEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Difficulte:
		//	facile | moyen | difficile;
		public EnumRule getRule() { return rule; }
		
		//facile | moyen | difficile
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//facile
		public EnumLiteralDeclaration getFacileEnumLiteralDeclaration_0() { return cFacileEnumLiteralDeclaration_0; }
		
		//'facile'
		public Keyword getFacileFacileKeyword_0_0() { return cFacileFacileKeyword_0_0; }
		
		//moyen
		public EnumLiteralDeclaration getMoyenEnumLiteralDeclaration_1() { return cMoyenEnumLiteralDeclaration_1; }
		
		//'moyen'
		public Keyword getMoyenMoyenKeyword_1_0() { return cMoyenMoyenKeyword_1_0; }
		
		//difficile
		public EnumLiteralDeclaration getDifficileEnumLiteralDeclaration_2() { return cDifficileEnumLiteralDeclaration_2; }
		
		//'difficile'
		public Keyword getDifficileDifficileKeyword_2_0() { return cDifficileDifficileKeyword_2_0; }
	}
	
	private final JeuElements pJeu;
	private final PartieElements pPartie;
	private final PartieElementElements pPartieElement;
	private final EnergieElements pEnergie;
	private final ObstacleElements pObstacle;
	private final TactiqueTypeElements eTactiqueType;
	private final MobileElements pMobile;
	private final ProjectileElements pProjectile;
	private final NatureTerrainElements pNatureTerrain;
	private final TYPE_TERRAINElements eTYPE_TERRAIN;
	private final NiveauElements pNiveau;
	private final DifficulteElements eDifficulte;
	private final CarteElements pCarte;
	private final CaseElements pCase;
	private final VagueElements pVague;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TowerDefenseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJeu = new JeuElements();
		this.pPartie = new PartieElements();
		this.pPartieElement = new PartieElementElements();
		this.pEnergie = new EnergieElements();
		this.pObstacle = new ObstacleElements();
		this.eTactiqueType = new TactiqueTypeElements();
		this.pMobile = new MobileElements();
		this.pProjectile = new ProjectileElements();
		this.pNatureTerrain = new NatureTerrainElements();
		this.eTYPE_TERRAIN = new TYPE_TERRAINElements();
		this.pNiveau = new NiveauElements();
		this.eDifficulte = new DifficulteElements();
		this.pCarte = new CarteElements();
		this.pCase = new CaseElements();
		this.pVague = new VagueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.TowerDefense".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////les projectiles ne sont pas rattachés a d autres éléments :(
	//Jeu:
	//	'Jeu' name=ID '{'
	//	parties+=Partie*
	//	'}';
	public JeuElements getJeuAccess() {
		return pJeu;
	}
	
	public ParserRule getJeuRule() {
		return getJeuAccess().getRule();
	}
	
	//Partie:
	//	'Partie' name=ID '{'
	//	//natures+=NatureTerrain*
	//	cases+=Case*
	//	cartes+=Carte*
	//	partieElements+=PartieElement*
	//	niveaux+=Niveau*
	//	'}';
	public PartieElements getPartieAccess() {
		return pPartie;
	}
	
	public ParserRule getPartieRule() {
		return getPartieAccess().getRule();
	}
	
	//PartieElement:
	//	Obstacle | Mobile | Projectile | NatureTerrain;
	public PartieElementElements getPartieElementAccess() {
		return pPartieElement;
	}
	
	public ParserRule getPartieElementRule() {
		return getPartieElementAccess().getRule();
	}
	
	//Energie:
	//	infini?='infini' | valeur=INT;
	public EnergieElements getEnergieAccess() {
		return pEnergie;
	}
	
	public ParserRule getEnergieRule() {
		return getEnergieAccess().getRule();
	}
	
	//Obstacle:
	//	'Obstacle' name=ID '{'
	//	'Campement' campement=[Case]
	//	'PVmax' quantiteEnergieMax=Energie
	//	'Tactique' tactique=TactiqueType
	//	'}';
	public ObstacleElements getObstacleAccess() {
		return pObstacle;
	}
	
	public ParserRule getObstacleRule() {
		return getObstacleAccess().getRule();
	}
	
	//enum TactiqueType:
	//	proche='procheFirst' | faible='faibleFirst' | fort='fortFirst';
	public TactiqueTypeElements getTactiqueTypeAccess() {
		return eTactiqueType;
	}
	
	public EnumRule getTactiqueTypeRule() {
		return getTactiqueTypeAccess().getRule();
	}
	
	//Mobile:
	//	'Mobile' name=ID '{'
	//	'F' force=INT
	//	'V' volume=INT
	//	'NumVague' numVague=INT
	//	'In' caseEntree=[Case]
	//	'Out' caseSortie=[Case]
	//	'PVmax' quantiteEnergieMax=Energie
	//	'Tactique' tactique=TactiqueType
	//	'}';
	public MobileElements getMobileAccess() {
		return pMobile;
	}
	
	public ParserRule getMobileRule() {
		return getMobileAccess().getRule();
	}
	
	//Projectile:
	//	'Projectile' name=ID '{'
	//	'Portee' portee=INT
	//	'Masse' masse=INT
	//	'Vitesse' vitesse=INT
	//	'Position' case=[Case]
	//	'Direction' cible=[Case]
	//	'Degat' degat=Energie
	//	'}';
	public ProjectileElements getProjectileAccess() {
		return pProjectile;
	}
	
	public ParserRule getProjectileRule() {
		return getProjectileAccess().getRule();
	}
	
	//NatureTerrain:
	//	'NatureTerrain' name=ID '{'
	//	'Volume' volume=INT
	//	'Type' type=TYPE_TERRAIN
	//	'FatigueEntree' fatigue=Energie
	//	'}';
	public NatureTerrainElements getNatureTerrainAccess() {
		return pNatureTerrain;
	}
	
	public ParserRule getNatureTerrainRule() {
		return getNatureTerrainAccess().getRule();
	}
	
	//enum TYPE_TERRAIN:
	//	entree | sortie | chemin | campement='camp' | decoration='deco';
	public TYPE_TERRAINElements getTYPE_TERRAINAccess() {
		return eTYPE_TERRAIN;
	}
	
	public EnumRule getTYPE_TERRAINRule() {
		return getTYPE_TERRAINAccess().getRule();
	}
	
	//Niveau:
	//	'Niveau' name=ID difficulte=Difficulte '{'
	//	'DureePauses' dureePause=INT
	//	'Argent' argent=INT
	//	'MobSortisMax' mobSortisLimite=INT
	//	'Carte' carte=[Carte] vagues+=Vague*
	//	'}';
	public NiveauElements getNiveauAccess() {
		return pNiveau;
	}
	
	public ParserRule getNiveauRule() {
		return getNiveauAccess().getRule();
	}
	
	//enum Difficulte:
	//	facile | moyen | difficile;
	public DifficulteElements getDifficulteAccess() {
		return eDifficulte;
	}
	
	public EnumRule getDifficulteRule() {
		return getDifficulteAccess().getRule();
	}
	
	//Carte:
	//	'Carte' name=ID '{'
	//	'Lignes' nbLignes=INT
	//	'Colonnes' nbColonnes=INT
	//	'Cases' cases+=[Case]*
	//	'}';
	public CarteElements getCarteAccess() {
		return pCarte;
	}
	
	public ParserRule getCarteRule() {
		return getCarteAccess().getRule();
	}
	
	//Case:
	//	name=ID
	//	i=INT
	//	j=INT
	//	natureDuTerrain=[NatureTerrain];
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Vague:
	//	'Vague' name=ID // j'ai rajoute un nom aux vagues
	//	'{'
	//	'Mobiles' mobiles+=[Mobile]*
	//	'Obstacles' obstacles+=[Obstacle]*
	//	'Gain' gainVictoire=INT
	//	'}';
	public VagueElements getVagueAccess() {
		return pVague;
	}
	
	public ParserRule getVagueRule() {
		return getVagueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
